/*
	'=======================================================================
	'   Author(s):      D V Rao
	'   Module/Form:    ECF-4.0-CommonTypes.cs
	'   Created Date:   
	'   Description:    
	'
	'   Modification History:
	'=======================================================================
	'   Author(s)       Date        Control/Procedure       Change
 	'=======================================================================
     '  Rao     02/10/2015      Removed references to Amcad extensions
    '   Rao     05/07/2013       Person , Organization - New Constructor To Simple Type  
    '   Rao     04/17/2013       DocketCodeId is long
    '   Rao     07/31/2012       PersonType Added Properties EportalPassword
    '   Rao     06/25/2012       PersonType Added Properties int? EportalUserId , EportalLogonName, Bar Number
    '   Rao     06/23/2012       DocumentType Added Property NumberOfAttachments
    '   Rao     06/23/2012       CaseFilingType. Added Property ClientIP
    '   Rao     06/22/2012       ElectronicFilingCallbackMessageType. Added Properties IsFilingAccepted , IsFilingRejected
    '   Rao     06/22/2012       ReviewedDocumentType Added Property IsDocumentRejected
    '   Rao     06/19/2012       ReviewedDocumentType Added Property RejectionReason
    '   Rao     06/19/2012       CaseFilingType. Added Property FilingId
    '   Rao     06/11/2012       ECF DocumentType Constructor add attachmentSequenceId
    '   Rao     06/03/2012       ElectronicFilingCallBackMessageType Case can be appellatecase
    '   Rao     05/13/2012       Added Property CorrectionType to ECF DocumentType  
    '   Rao     05/08/2012       Added Property NumberOfPages , FileInputId to ECF DocumentType , DocumentIdNumber
    '   Rao     04/25/2012       Moved ACCEPTED_DOCUMENT_STATUS , REJECTED_DOCUMENT_STATUS to Sealed Class COnstants
    '   Rao     04/24/2012       Cleaned up code. changed private property @case to make the code redable
    '   Rao     04/24/2012       Moved AddNameSpaces to EcfHelper on ElectronicFilingCallbackMessageType
    '   Rao     08/12/2011       Added AppellateCase to CaseTypeSelectionType
 *  '   Rao     01/28/2012       Added PersonChargeAssociation to CaseAugmentation 
	'=======================================================================
	*/

#region WSCF
//------------------------------------------------------------------------------
// <autogenerated code>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated code>
//------------------------------------------------------------------------------
// File time 26-11-08 09:18 PM
//
// This source code was auto-generated by WsContractFirst, Version=0.7.6319.1
#endregion

using Niem.Structures.v20;
using Niem.NiemCore.v20;
using Niem.Domains.Jxdm.v40;
using Niem.Proxy.xsd.v20;
using Niem.Iso639Part3.v20;
using System.Linq;
using System.Collections.Generic;
namespace Oasis.LegalXml.CourtFiling.v40.Ecf
{

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3053")]
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]

    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:oasis:names:tc:legalxml-courtfiling:schema:xsd:CommonTypes-4.0", TypeName = "AliasType")]
    [System.Xml.Serialization.XmlRootAttribute("Alias", Namespace = "urn:oasis:names:tc:legalxml-courtfiling:schema:xsd:CommonTypes-4.0", IsNullable = false, ElementName = "AliasType")]
     
    public partial class AliasType : ComplexObjectType
    {

        /// <remarks/>
        private TextType aliasAlternateName;

        /// <remarks/>
        private System.Collections.Generic.List<TextType> aliasAlternateNameTypeCode;

        /// <remarks/>
        private System.Collections.Generic.List<ReferenceType> entityReference;

        public AliasType()
        {
        }

        public AliasType(string alternateName , string alternateNameTypeCode , string referencedEntityId)
        {
            if (!string.IsNullOrEmpty(referencedEntityId) && !string.IsNullOrEmpty(alternateName) && !string.IsNullOrEmpty(alternateNameTypeCode))
            {
                this.aliasAlternateName = new TextType(alternateName);
                this.aliasAlternateNameTypeCode = NiemStringHelper<TextType>.ToList(alternateNameTypeCode);
                this.entityReference = new System.Collections.Generic.List<ReferenceType> { new ReferenceType(referencedEntityId) };
            }
        }


        public AliasType(TextType aliasAlternateName, System.Collections.Generic.List<TextType> aliasAlternateNameTypeCode, System.Collections.Generic.List<ReferenceType> entityReference)
        {
            this.aliasAlternateName = aliasAlternateName;
            this.aliasAlternateNameTypeCode = aliasAlternateNameTypeCode;
            this.entityReference = entityReference;
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 0, ElementName = "AliasAlternateName")]
        public TextType AliasAlternateName
        {
            get
            {
                return this.aliasAlternateName;
            }
            set
            {
                if ((value == null))
                {
                    throw new System.ArgumentNullException("AliasAlternateName");
                }
                if ((this.aliasAlternateName != value))
                {
                    this.aliasAlternateName = value;
                    this.RaisePropertyChanged("AliasAlternateName");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("AliasAlternateNameTypeCode", Order = 1)]
        public System.Collections.Generic.List<TextType> AliasAlternateNameTypeCode
        {
            get
            {
                return this.aliasAlternateNameTypeCode;
            }
            set
            {
                if ((this.aliasAlternateNameTypeCode != value))
                {
                    this.aliasAlternateNameTypeCode = value;
                    this.RaisePropertyChanged("AliasAlternateNameTypeCode");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("EntityReference", Namespace = "http://niem.gov/niem/niem-core/2.0", Order = 2)]
        public System.Collections.Generic.List<ReferenceType> EntityReference
        {
            get
            {
                return this.entityReference;
            }
            set
            {
                if ((this.entityReference != value))
                {
                    this.entityReference = value;
                    this.RaisePropertyChanged("EntityReference");
                }
            }
        }
    }

    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ElectronicFilingMessageType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ElectronicFilingCallbackMessageType))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3053")]
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]

    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:oasis:names:tc:legalxml-courtfiling:schema:xsd:CommonTypes-4.0", TypeName = "CaseFilingType")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "urn:oasis:names:tc:legalxml-courtfiling:schema:xsd:CommonTypes-4.0", IsNullable = true, ElementName = "CaseFilingType")]
    
    public abstract partial class CaseFilingType : Niem.NiemCore.v20.DocumentType
    {

        /// <remarks/>
        private IdentificationType sendingMDELocationID;

        /// <remarks/>
        private string sendingMDEProfileCode;

        public CaseFilingType()
        {
        }

        public CaseFilingType(IdentificationType sendingMDELocationID, string sendingMDEProfileCode)
        {
            this.sendingMDELocationID = sendingMDELocationID;
            this.sendingMDEProfileCode = sendingMDEProfileCode;
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 0, ElementName = "SendingMDELocationID")]
        public IdentificationType SendingMDELocationID
        {
            get
            {
                return this.sendingMDELocationID;
            }
            set
            {
                if ((value == null))
                {
                    throw new System.ArgumentNullException("SendingMDELocationID");
                }
                if ((this.sendingMDELocationID != value))
                {
                    this.sendingMDELocationID = value;
                    this.RaisePropertyChanged("SendingMDELocationID");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(DataType = "normalizedString", Order = 1, ElementName = "SendingMDEProfileCode")]
        public string SendingMDEProfileCode
        {
            get
            {
                return this.sendingMDEProfileCode;
            }
            set
            {
                if ((this.sendingMDEProfileCode != value))
                {
                    this.sendingMDEProfileCode = value;
                    this.RaisePropertyChanged("SendingMDEProfileCode");
                }
            }
        }

        /// <summary>
        ///  Unique Filing ID assigned by Filing Review
        /// </summary>
        [System.Xml.Serialization.XmlIgnore()]
        public long FilingId
        {
            get
            {
                long filingId = -1;
                
                if ( this.DocumentIdentification != null &&
                     this.DocumentIdentification.Count > 0 &&
                     this.DocumentIdentification[0].IdentificationID != null &&
                     this.DocumentIdentification[0].IdentificationID.Count > 0 && 
                     !string.IsNullOrEmpty(this.DocumentIdentification[0].IdentificationID[0].Value)
                    )
                {
                    long.TryParse(this.DocumentIdentification[0].IdentificationID[0].Value, out filingId);
                }
                return filingId;
            }
            set
            {
                this.DocumentIdentification = new List<IdentificationType>{ new   IdentificationType(value.ToString())};
            }
        }

        /// <summary>
        ///  Unique Filing ID assigned by Filing Review
        /// </summary>
        [System.Xml.Serialization.XmlIgnore()]
        public string ClientIP
        {
            get
            {
                return  ( this.SendingMDELocationID != null ? 
                          NiemStringHelper<Niem.Proxy.xsd.v20.String>.ValueByPosition(this.SendingMDELocationID.IdentificationID, 1) : 
                         "NA"
                         ) ;
            }
            set
            {
                this.SendingMDELocationID = new IdentificationType(value.ToString());
            }
        }

    }


    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3053")]
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]

    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:oasis:names:tc:legalxml-courtfiling:schema:xsd:CommonTypes-4.0", TypeName = "ElectronicFilingMessageType")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "urn:oasis:names:tc:legalxml-courtfiling:schema:xsd:CommonTypes-4.0", IsNullable = true, ElementName = "ElectronicFilingMessageType")]
    
    public abstract partial class ElectronicFilingMessageType : CaseFilingType
    {

        /// <remarks/>
        private System.Collections.Generic.List<ElectronicServiceInformationType> electronicServiceInformation;

        public ElectronicFilingMessageType()
        {
        }

        public ElectronicFilingMessageType(System.Collections.Generic.List<ElectronicServiceInformationType> electronicServiceInformation)
        {
            this.electronicServiceInformation = electronicServiceInformation;
        }

        [System.Xml.Serialization.XmlElementAttribute("ElectronicServiceInformation", Order = 0)]
        public System.Collections.Generic.List<ElectronicServiceInformationType> ElectronicServiceInformation
        {
            get
            {
                return this.electronicServiceInformation;
            }
            set
            {
                if ((this.electronicServiceInformation != value))
                {
                    this.electronicServiceInformation = value;
                    this.RaisePropertyChanged("ElectronicServiceInformation");
                }
            }
        }
    }

    /// <remarks/>
    /// 
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Oasis.LegalXml.CourtFiling.v40.Appellate.AppellateCaseType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Oasis.LegalXml.CourtFiling.v40.Citation.CitationCaseType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Oasis.LegalXml.CourtFiling.v40.Civil.CivilCaseType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Oasis.LegalXml.CourtFiling.v40.Criminal.CriminalCaseType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Oasis.LegalXml.CourtFiling.v40.Domestic.DomesticCaseType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Oasis.LegalXml.CourtFiling.v40.Juvenile.JuvenileCaseType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Niem.NiemCore.v20.CaseType))]

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3053")]
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]

    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:oasis:names:tc:legalxml-courtfiling:schema:xsd:CommonTypes-4.0", TypeName = "ElectronicFilingCallbackMessageType")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "urn:oasis:names:tc:legalxml-courtfiling:schema:xsd:CommonTypes-4.0", IsNullable = true, ElementName = "ElectronicFilingCallbackMessageType")]
    
    public abstract partial class ElectronicFilingCallbackMessageType : CaseFilingType
    {

        /// <remarks/>
        private object filedCase;
        private CaseTypeSelectionType caseTypeSelection; 

        /// <remarks/>
        private DateType filingCompletionDate;

        /// <remarks/>
        private FilingStatusType filingStatus;

        /// <remarks/>
        private ReviewedDocumentType reviewedLeadDocument;

        /// <remarks/>
        private System.Collections.Generic.List<ReviewedDocumentType> reviewedConnectedDocument;

        [field: System.NonSerialized]
        [System.Xml.Serialization.XmlNamespaceDeclarations]
        public System.Xml.Serialization.XmlSerializerNamespaces namespaces = new System.Xml.Serialization.XmlSerializerNamespaces(); 

        public ElectronicFilingCallbackMessageType()
        {
            EcfHelper.AddNameSpaces(this.namespaces);
        }

        public ElectronicFilingCallbackMessageType(object filedCase, CaseTypeSelectionType caseTypeSelection, DateType filingCompletionDate, FilingStatusType filingStatus, ReviewedDocumentType reviewedLeadDocument, System.Collections.Generic.List<ReviewedDocumentType> reviewedConnectedDocument)
        {
            EcfHelper.AddNameSpaces(this.namespaces);
            this.filedCase = filedCase;
            this.caseTypeSelection = caseTypeSelection;
            this.filingCompletionDate = filingCompletionDate;
            this.filingStatus = filingStatus;
            this.reviewedLeadDocument = reviewedLeadDocument;
            this.reviewedConnectedDocument = reviewedConnectedDocument;
        }


        [System.Xml.Serialization.XmlElementAttribute("Case", typeof(Niem.NiemCore.v20.CaseType), Order = 0, Namespace = "http://niem.gov/niem/niem-core/2.0", IsNullable = true)]
        [System.Xml.Serialization.XmlElementAttribute("Case", typeof(Oasis.LegalXml.CourtFiling.v40.Citation.CitationCaseType), Order = 0, Namespace = "urn:oasis:names:tc:legalxml-courtfiling:schema:xsd:CitationCase-4.0", IsNullable = true)]
        [System.Xml.Serialization.XmlElementAttribute("Case", typeof(Oasis.LegalXml.CourtFiling.v40.Civil.CivilCaseType), Order = 0, Namespace = "urn:oasis:names:tc:legalxml-courtfiling:schema:xsd:CivilCase-4.0", IsNullable = true)]
        [System.Xml.Serialization.XmlElementAttribute("Case", typeof(Oasis.LegalXml.CourtFiling.v40.Criminal.CriminalCaseType), Order = 0, Namespace = "urn:oasis:names:tc:legalxml-courtfiling:schema:xsd:CriminalCase-4.0", IsNullable = true)]
        [System.Xml.Serialization.XmlElementAttribute("Case", typeof(Oasis.LegalXml.CourtFiling.v40.Domestic.DomesticCaseType), Order = 0, Namespace = "urn:oasis:names:tc:legalxml-courtfiling:schema:xsd:DomesticCase-4.0", IsNullable = true)]
        [System.Xml.Serialization.XmlElementAttribute("Case", typeof(Oasis.LegalXml.CourtFiling.v40.Juvenile.JuvenileCaseType), Order = 0, Namespace = "urn:oasis:names:tc:legalxml-courtfiling:schema:xsd:JuvenileCase-4.0", IsNullable = true)]
        [System.Xml.Serialization.XmlElementAttribute("AppellateCase", typeof(Oasis.LegalXml.CourtFiling.v40.Appellate.AppellateCaseType), Order = 0, Namespace = "urn:oasis:names:tc:legalxml-courtfiling:schema:xsd:AppellateCase-4.0", IsNullable = true)]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("CaseTypeSelection")]
        public object Case
        {
            get
            {
                return this.filedCase;
            }
            set
            {
                if ((this.filedCase != value))
                {
                    this.caseTypeSelection = EcfHelper.GetCaseTypeSelectionType(caseObject:value);
                    this.filedCase = value;
                    this.RaisePropertyChanged("Case");
                }

            }
        }

        [System.Xml.Serialization.XmlElementAttribute("CaseTypeSelection", Order = 1)]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public CaseTypeSelectionType CaseTypeSelection
        {
            get
            {
                return this.caseTypeSelection;
            }
            set
            {
                if ((this.caseTypeSelection != value))
                {
                    this.caseTypeSelection = value;
                    this.RaisePropertyChanged("CaseTypeSelection");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 2, ElementName = "FilingCompletionDate")]
        public DateType FilingCompletionDate
        {
            get
            {
                return this.filingCompletionDate;
            }
            set
            {
                if ((value == null))
                {
                    throw new System.ArgumentNullException("FilingCompletionDate");
                }
                if ((this.filingCompletionDate != value))
                {
                    this.filingCompletionDate = value;
                    this.RaisePropertyChanged("FilingCompletionDate");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 3, ElementName = "FilingStatus")]
        public FilingStatusType FilingStatus
        {
            get
            {
                return this.filingStatus;
            }
            set
            {
                if ((value == null))
                {
                    throw new System.ArgumentNullException("FilingStatus");
                }
                if ((this.filingStatus != value))
                {
                    this.filingStatus = value;
                    this.RaisePropertyChanged("FilingStatus");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 4, ElementName = "ReviewedLeadDocument")]
        public ReviewedDocumentType ReviewedLeadDocument
        {
            get
            {
                return this.reviewedLeadDocument;
            }
            set
            {
                if ((value == null))
                {
                    throw new System.ArgumentNullException("ReviewedLeadDocument");
                }
                if ((this.reviewedLeadDocument != value))
                {
                    this.reviewedLeadDocument = value;
                    this.RaisePropertyChanged("ReviewedLeadDocument");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("ReviewedConnectedDocument", Order = 5)]
        public System.Collections.Generic.List<ReviewedDocumentType> ReviewedConnectedDocument
        {
            get
            {
                return this.reviewedConnectedDocument;
            }
            set
            {
                if ((this.reviewedConnectedDocument != value))
                {
                    this.reviewedConnectedDocument = value;
                    this.RaisePropertyChanged("ReviewedConnectedDocument");
                }
            }
        }

        [System.Xml.Serialization.XmlIgnore()]
        public System.Boolean IsFilingAccepted
        {
            get
            {
                
                string statusText = this.filingStatus != null ? (NiemStringHelper<TextType>.FirstValue(this.filingStatus.StatusText)) : string.Empty;
                statusText = statusText.ToUpperInvariant();
                return ( statusText.Equals(PolicyConstants.ACCEPTED_FILING_STATUS) ||
                         statusText.Equals(PolicyConstants.FILED_FILING_STATUS) 
                       );
            }
        }

        [System.Xml.Serialization.XmlIgnore()]
        public System.Boolean IsFilingRejected
        {
            get
            {

                string statusText = this.filingStatus != null ? (NiemStringHelper<TextType>.FirstValue(this.filingStatus.StatusText)) : string.Empty;
                statusText = statusText.ToUpperInvariant();
                return statusText.Equals(PolicyConstants.REJECTED_FILING_STATUS);
            }
        }

        [System.Xml.Serialization.XmlIgnore()]
        public System.String RejectionReason
        {
            get
            {
                
                return
                (
                    this.filingStatus != null &&
                    this.filingStatus.StatusDescriptionText != null ?
                    NiemStringHelper<TextType>.FirstValue(this.filingStatus.StatusDescriptionText) :
                    string.Empty
                );
            }
        }

    }


    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3053")]
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName = "CaseOfficialType", Namespace = "urn:oasis:names:tc:legalxml-courtfiling:schema:xsd:CommonTypes-4.0")]
    [System.Xml.Serialization.XmlRootAttribute("CaseOfficial", Namespace = "urn:oasis:names:tc:legalxml-courtfiling:schema:xsd:CommonTypes-4.0", IsNullable = false, ElementName = "CaseOfficialType")]
    
    public partial class CaseOfficialType : Niem.Domains.Jxdm.v40.CaseOfficialType
    {

        /// <remarks/>
        private System.Collections.Generic.List<ReferenceType> caseRepresentedPartyReference;

        public CaseOfficialType()
        {
        }

        public CaseOfficialType(System.Collections.Generic.List<ReferenceType> caseRepresentedPartyReference)
        {
            this.caseRepresentedPartyReference = caseRepresentedPartyReference;
        }

        [System.Xml.Serialization.XmlElementAttribute("CaseRepresentedPartyReference", Order = 0)]
        public System.Collections.Generic.List<ReferenceType> CaseRepresentedPartyReference
        {
            get
            {
                return this.caseRepresentedPartyReference;
            }
            set
            {
                if ((this.caseRepresentedPartyReference != value))
                {
                    this.caseRepresentedPartyReference = value;
                    this.RaisePropertyChanged("CaseRepresentedPartyReference");
                }
            }
        }
    }


    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3053")]
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]

    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:oasis:names:tc:legalxml-courtfiling:schema:xsd:CommonTypes-4.0", TypeName = "FilingStatusType")]
    [System.Xml.Serialization.XmlRootAttribute("FilingStatus", Namespace = "urn:oasis:names:tc:legalxml-courtfiling:schema:xsd:CommonTypes-4.0", IsNullable = false, ElementName = "FilingStatusType")]
    
    public partial class FilingStatusType : StatusType
    {

        /// <remarks/>
        private string filingStatusCode;

        public FilingStatusType()
        {
        }

        public FilingStatusType(string filingStatusCode)
        {
            this.filingStatusCode = filingStatusCode;
        }

        [System.Xml.Serialization.XmlElementAttribute(DataType = "normalizedString", Order = 0, ElementName = "FilingStatusCode")]
        public string FilingStatusCode
        {
            get
            {
                return this.filingStatusCode;
            }
            set
            {
                if ((this.filingStatusCode != value))
                {
                    this.filingStatusCode = value;
                    this.RaisePropertyChanged("FilingStatusCode");
                }
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3053")]
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]

    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:oasis:names:tc:legalxml-courtfiling:schema:xsd:CommonTypes-4.0", TypeName = "ElectronicServiceInformationType")]
    [System.Xml.Serialization.XmlRootAttribute("ElectronicServiceInformation", Namespace = "urn:oasis:names:tc:legalxml-courtfiling:schema:xsd:CommonTypes-4.0", IsNullable = false, ElementName = "ElectronicServiceInformationType")]
    
    public partial class ElectronicServiceInformationType : ComplexObjectType
    {

        /// <remarks/>
        private IdentificationType serviceRecipientID;

        /// <remarks/>
        private IdentificationType receivingMDELocationID;

        /// <remarks/>
        private string receivingMDEProfileCode;

        public ElectronicServiceInformationType()
        {
        }

        public ElectronicServiceInformationType(IdentificationType serviceRecipientID, IdentificationType receivingMDELocationID, string receivingMDEProfileCode)
        {
            this.serviceRecipientID = serviceRecipientID;
            this.receivingMDELocationID = receivingMDELocationID;
            this.receivingMDEProfileCode = receivingMDEProfileCode;
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 0, ElementName = "ServiceRecipientID")]
        public IdentificationType ServiceRecipientID
        {
            get
            {
                return this.serviceRecipientID;
            }
            set
            {
                if ((value == null))
                {
                    throw new System.ArgumentNullException("ServiceRecipientID");
                }
                if ((this.serviceRecipientID != value))
                {
                    this.serviceRecipientID = value;
                    this.RaisePropertyChanged("ServiceRecipientID");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 1, ElementName = "ReceivingMDELocationID")]
        public IdentificationType ReceivingMDELocationID
        {
            get
            {
                return this.receivingMDELocationID;
            }
            set
            {
                if ((value == null))
                {
                    throw new System.ArgumentNullException("ReceivingMDELocationID");
                }
                if ((this.receivingMDELocationID != value))
                {
                    this.receivingMDELocationID = value;
                    this.RaisePropertyChanged("ReceivingMDELocationID");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(DataType = "normalizedString", Order = 2, ElementName = "ReceivingMDEProfileCode")]
        public string ReceivingMDEProfileCode
        {
            get
            {
                return this.receivingMDEProfileCode;
            }
            set
            {
                if ((this.receivingMDEProfileCode != value))
                {
                    this.receivingMDEProfileCode = value;
                    this.RaisePropertyChanged("ReceivingMDEProfileCode");
                }
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3053")]
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]

    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:oasis:names:tc:legalxml-courtfiling:schema:xsd:CommonTypes-4.0", TypeName = "CaseParticipantType")]
    [System.Xml.Serialization.XmlRootAttribute("CaseParticipant", Namespace = "urn:oasis:names:tc:legalxml-courtfiling:schema:xsd:CommonTypes-4.0", IsNullable = false, ElementName = "CaseParticipantType")]
    
    public partial class CaseParticipantType : EntityType
    {

        /// <remarks/>
        private TextType caseParticipantRoleCode;

        /// <remarks/>
        private System.Collections.Generic.List<ContactInformationType> contactInformation;

        public CaseParticipantType()
        {
        }

        public CaseParticipantType(TextType caseParticipantRoleCode, System.Collections.Generic.List<ContactInformationType> contactInformation)
        {
            this.caseParticipantRoleCode = caseParticipantRoleCode;
            this.contactInformation = contactInformation;
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 0, ElementName = "CaseParticipantRoleCode")]
        public TextType CaseParticipantRoleCode
        {
            get
            {
                return this.caseParticipantRoleCode;
            }
            set
            {
                if ((value == null))
                {
                    throw new System.ArgumentNullException("CaseParticipantRoleCode");
                }
                if ((this.caseParticipantRoleCode != value))
                {
                    this.caseParticipantRoleCode = value;
                    this.RaisePropertyChanged("CaseParticipantRoleCode");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("ContactInformation", Namespace = "http://niem.gov/niem/niem-core/2.0", IsNullable = true, Order = 1)]
        public System.Collections.Generic.List<ContactInformationType> ContactInformation
        {
            get
            {
                return this.contactInformation;
            }
            set
            {
                if ((this.contactInformation != value))
                {
                    this.contactInformation = value;
                    this.RaisePropertyChanged("ContactInformation");
                }
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3053")]
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]

    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:oasis:names:tc:legalxml-courtfiling:schema:xsd:CommonTypes-4.0", TypeName = "CaseAugmentationType")]
    [System.Xml.Serialization.XmlRootAttribute("CaseAugmentation", Namespace = "urn:oasis:names:tc:legalxml-courtfiling:schema:xsd:CommonTypes-4.0", IsNullable = false, ElementName = "CaseAugmentationType")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Arizona.Courts.Extensions.v20.CaseAugmentationType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Arizona.Courts.Extensions.v20.CaseParticipantType))]

    public partial class CaseAugmentationType : ComplexObjectType
    {

        /// <remarks/>
        private LanguageCodeType languageCode;

        /// <remarks/>
        private System.Collections.Generic.List<AliasType> alias;

        /// <remarks/>
        private System.Collections.Generic.List<CaseOfficialType> caseOfficial;

        /// <remarks/>
        private System.Collections.Generic.List<CaseOfficialType> caseOtherEntityAttorney;

        /// <remarks/>
        private System.Collections.Generic.List<CaseParticipantType> caseParticipant;

        /// <remarks/>
        private TextType caseShortTitleText;

        /// <remarks/>
        private System.Collections.Generic.List<OrganizationAssociationType> organizationAssociation;

        /// <remarks/>
        private System.Collections.Generic.List<PersonAssociationType> personAssociation;

        /// <remarks/>
        private System.Collections.Generic.List<PersonOrganizationAssociationType> personOrganizationAssociation;

        /// <remarks/>
        private System.Collections.Generic.List<RelatedCaseAssociationType> relatedCaseAssociation;
        private System.Collections.Generic.List<PersonChargeAssociationType> personChargeAssociation;

        public CaseAugmentationType()
        {
        }

        public CaseAugmentationType(LanguageCodeType languageCode, System.Collections.Generic.List<AliasType> alias, System.Collections.Generic.List<CaseOfficialType> caseOfficial, System.Collections.Generic.List<CaseOfficialType> caseOtherEntityAttorney, System.Collections.Generic.List<CaseParticipantType> caseParticipant, TextType caseShortTitleText, System.Collections.Generic.List<OrganizationAssociationType> organizationAssociation, System.Collections.Generic.List<PersonAssociationType> personAssociation, System.Collections.Generic.List<PersonOrganizationAssociationType> personOrganizationAssociation, System.Collections.Generic.List<RelatedCaseAssociationType> relatedCaseAssociation ,  System.Collections.Generic.List<PersonChargeAssociationType> personChargeAssociation)
        {
            this.languageCode = languageCode;
            this.alias = alias;
            this.caseOfficial = caseOfficial;
            this.caseOtherEntityAttorney = caseOtherEntityAttorney;
            this.caseParticipant = caseParticipant;
            this.caseShortTitleText = caseShortTitleText;
            this.organizationAssociation = organizationAssociation;
            this.personAssociation = personAssociation;
            this.personOrganizationAssociation = personOrganizationAssociation;
            this.relatedCaseAssociation = relatedCaseAssociation;
            this.personChargeAssociation = personChargeAssociation;
        }

        [System.Xml.Serialization.XmlElementAttribute("LanguageCode", Namespace = "http://niem.gov/niem/niem-core/2.0", IsNullable = true, Order = 0)]
        public LanguageCodeType LanguageCode
        {
            get
            {
                return this.languageCode;
            }
            set
            {
                if ((this.languageCode != value))
                {
                    this.languageCode = value;
                    this.RaisePropertyChanged("LanguageCode");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("Alias", Order = 1)]
        public System.Collections.Generic.List<AliasType> Alias
        {
            get
            {
                return this.alias;
            }
            set
            {
                if ((this.alias != value))
                {
                    this.alias = value;
                    this.RaisePropertyChanged("Alias");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("CaseOfficial", Order = 2)]
        public System.Collections.Generic.List<CaseOfficialType> CaseOfficial
        {
            get
            {
                return this.caseOfficial;
            }
            set
            {
                if ((this.caseOfficial != value))
                {
                    this.caseOfficial = value;
                    this.RaisePropertyChanged("CaseOfficial");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("CaseOtherEntityAttorney", Order = 3)]
        public System.Collections.Generic.List<CaseOfficialType> CaseOtherEntityAttorney
        {
            get
            {
                return this.caseOtherEntityAttorney;
            }
            set
            {
                if ((this.caseOtherEntityAttorney != value))
                {
                    this.caseOtherEntityAttorney = value;
                    this.RaisePropertyChanged("CaseOtherEntityAttorney");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("CaseParticipant", typeof(Oasis.LegalXml.CourtFiling.v40.Ecf.CaseParticipantType), Namespace = "urn:oasis:names:tc:legalxml-courtfiling:schema:xsd:CommonTypes-4.0", Order = 4)]
        [System.Xml.Serialization.XmlElementAttribute("CaseParticipant", typeof(Arizona.Courts.Extensions.v20.CaseParticipantType), Namespace = "http://schema.azcourts.az.gov/courts/efiling/ecf/extension/2.0", Order = 4)]

        public System.Collections.Generic.List<CaseParticipantType> CaseParticipant
        {
            get
            {
                return this.caseParticipant;
            }
            set
            {
                if ((this.caseParticipant != value))
                {
                    this.caseParticipant = value;
                    this.RaisePropertyChanged("CaseParticipant");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 5, ElementName = "CaseShortTitleText")]
        public TextType CaseShortTitleText
        {
            get
            {
                return this.caseShortTitleText;
            }
            set
            {
                if ((value == null))
                {
                    throw new System.ArgumentNullException("CaseShortTitleText");
                }
                if ((this.caseShortTitleText != value))
                {
                    this.caseShortTitleText = value;
                    this.RaisePropertyChanged("CaseShortTitleText");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("OrganizationAssociation", Order = 6)]
        public System.Collections.Generic.List<OrganizationAssociationType> OrganizationAssociation
        {
            get
            {
                return this.organizationAssociation;
            }
            set
            {
                if ((this.organizationAssociation != value))
                {
                    this.organizationAssociation = value;
                    this.RaisePropertyChanged("OrganizationAssociation");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("PersonAssociation", Order = 7)]
        public System.Collections.Generic.List<PersonAssociationType> PersonAssociation
        {
            get
            {
                return this.personAssociation;
            }
            set
            {
                if ((this.personAssociation != value))
                {
                    this.personAssociation = value;
                    this.RaisePropertyChanged("PersonAssociation");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("PersonOrganizationAssociation", Order = 8)]
        public System.Collections.Generic.List<PersonOrganizationAssociationType> PersonOrganizationAssociation
        {
            get
            {
                return this.personOrganizationAssociation;
            }
            set
            {
                if ((this.personOrganizationAssociation != value))
                {
                    this.personOrganizationAssociation = value;
                    this.RaisePropertyChanged("PersonOrganizationAssociation");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("RelatedCaseAssociation", Order = 9)]
        public System.Collections.Generic.List<RelatedCaseAssociationType> RelatedCaseAssociation
        {
            get
            {
                return this.relatedCaseAssociation;
            }
            set
            {
                if ((this.relatedCaseAssociation != value))
                {
                    this.relatedCaseAssociation = value;
                    this.RaisePropertyChanged("RelatedCaseAssociation");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("PersonChargeAssociation", Namespace = "http://niem.gov/niem/domains/jxdm/4.0", Order = 10)]
        public System.Collections.Generic.List<PersonChargeAssociationType> PersonChargeAssociation
        {
            get
            {
                return this.personChargeAssociation;
            }
            set
            {
                if ((this.personChargeAssociation != value))
                {
                    this.personChargeAssociation = value;
                    this.RaisePropertyChanged("PersonChargeAssociation");
                }
            }
        }

    }


    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3053")]
    
    // [System.Diagnostics.DebuggerStepThroughAttribute()]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName = "PersonType", Namespace = "urn:oasis:names:tc:legalxml-courtfiling:schema:xsd:CommonTypes-4.0")]
    [System.Xml.Serialization.XmlRootAttribute("EntityPerson", Namespace = "urn:oasis:names:tc:legalxml-courtfiling:schema:xsd:CommonTypes-4.0", IsNullable = false, ElementName = "PersonType")]
    
    public partial class PersonType : Niem.NiemCore.v20.PersonType
    {

        
        /// <remarks/>
        private PersonAugmentationType personAugmentation;

        public PersonType()
        {
        }
        
        public PersonType(string id, string prefix, string givenName, string middleName, string surName, string suffix , string eportalUserId)
            : base(id, prefix, givenName, middleName, surName, suffix, eportalUserId)
        {
        } 
        

        public PersonType(string id , string prefix, string givenName, string middleName, string surName, string suffix, string address1, string address2, string city, string state, string zipCode, string phoneNumber, string extension, string emailAddress , string eportalUserId) : base(id , prefix , givenName , middleName , surName , suffix , eportalUserId) 
        {
            if ( !string.IsNullOrEmpty(address1) ||
                  !string.IsNullOrEmpty(address2) ||
                  !string.IsNullOrEmpty(city) ||
                  !string.IsNullOrEmpty(state) ||
                  !string.IsNullOrEmpty(zipCode) ||
                  !string.IsNullOrEmpty(phoneNumber) ||
                  !string.IsNullOrEmpty(emailAddress)
                 )
            {

                this.personAugmentation = new PersonAugmentationType(address1, address2, city, state, zipCode, phoneNumber, extension, emailAddress);
            }
        }
         
        public PersonType(Oasis.LegalXml.CourtFiling.v40.EcfHelperTypes.PersonType person)
            : base(person: person)
        {
            this.personAugmentation = new PersonAugmentationType(person.ContactInformation);
        }
        public void ToSimplePersonType(out Oasis.LegalXml.CourtFiling.v40.EcfHelperTypes.PersonType person)
        {
            person = null;
            base.ToSimpleType(out person);
            if (this.personAugmentation != null)
            {
                Oasis.LegalXml.CourtFiling.v40.EcfHelperTypes.ContactInformationType contactInformation = null;
                this.personAugmentation.ToSimpleType(out contactInformation);
                if (contactInformation == null) contactInformation = new EcfHelperTypes.ContactInformationType();
                person.ContactInformation = contactInformation;
            }

        }

        
        public void ToSimpleType(out string id,  out string prefix, out string givenName, out string middleName, out string surName, out string suffix, out string fullName ,  out string address1, out string address2, out string city, out string state, out string zipCode, out string addressFullText , out string phoneNumber, out string extension , out string emailAddress , out string eportalUserId) 
        {

            base.ToSimpleType(out id, out prefix, out givenName, out middleName, out surName, out suffix, out fullName, out eportalUserId);


            address1 = string.Empty;
            address2 = string.Empty;
            city = string.Empty;
            state = string.Empty;
            zipCode = string.Empty;
            addressFullText = string.Empty;
            phoneNumber = string.Empty;
            extension = string.Empty;
            emailAddress = string.Empty;



            if (this.personAugmentation != null )
            {
                this.personAugmentation.ToSimpleType(out address1, out address2, out city, out state, out zipCode, out addressFullText, out phoneNumber, out extension , out emailAddress);
            }

        }
        
        public PersonType(PersonAugmentationType personAugmentation)
        {
            this.personAugmentation = personAugmentation;
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 0, ElementName = "PersonAugmentation")]
        public PersonAugmentationType PersonAugmentation
        {
            get
            {
                return this.personAugmentation;
            }
            set
            {
                if ((value == null))
                {
                    throw new System.ArgumentNullException("PersonAugmentation");
                }
                if ((this.personAugmentation != value))
                {
                    this.personAugmentation = value;
                    this.RaisePropertyChanged("PersonAugmentation");
                }
            }
        }

        [System.Xml.Serialization.XmlIgnore()]
        public string FullName
        {
            get
            {
                string prefix; 
                string givenName;
                string middleName;
                string surName; 
                string suffix;
                string suffixCode;
                string fullName = string.Empty ;
                if ( this.PersonName != null && this.PersonName.Count > 0  )
                {
                    this.PersonName[0].ToSimpleType(out prefix, out givenName, out middleName, out surName, out suffix, out suffixCode, out fullName);
                }
                return fullName;
            }
        }

        [System.Xml.Serialization.XmlIgnore()]
        public int? EportalUserId
        {
            get
            {
                int? eportalUserId = null;
                List<IdentificationType> identificationList = this.PersonOtherIdentification;
                if ( identificationList != null && identificationList.Count > 0 )
                {

                    IdentificationType matchingItem = identificationList.FirstOrDefault
                        (il => (
                                NiemStringHelper<TextType>.FirstValue(il.IdentificationCategories)
                                .Equals(PolicyConstants.EPORTAL_USERID)
                                )
                        );
                    if (matchingItem != null )
                    {
                        int tempUserId = 0;
                        System.Int32.TryParse(NiemStringHelper<Niem.Proxy.xsd.v20.String>.FirstValue(matchingItem.IdentificationID), out tempUserId);
                        if (tempUserId > 0) eportalUserId = tempUserId;
                    }
                }
                return eportalUserId;
            }
        }

        [System.Xml.Serialization.XmlIgnore()]
        public string EportalLogonName
        {
            get
            {
                string eportalLogonName = null;
                List<IdentificationType> identificationList = this.PersonOtherIdentification;
                if (identificationList != null && identificationList.Count > 0)
                {

                    IdentificationType matchingItem = identificationList.FirstOrDefault
                        (il => (
                                NiemStringHelper<TextType>.FirstValue(il.IdentificationCategories)
                                .Equals(PolicyConstants.EPORTAL_LOGONNAME)
                                )
                        );
                    if (matchingItem != null)
                    {
                        eportalLogonName = NiemStringHelper<Niem.Proxy.xsd.v20.String>.FirstValue(matchingItem.IdentificationID);
                    }
                }
                return eportalLogonName;
            }
        }

        [System.Xml.Serialization.XmlIgnore()]
        public string BarNumber
        {
            get
            {
                string barNumber = null;
                List<IdentificationType> identificationList = this.PersonOtherIdentification;
                if (identificationList != null && identificationList.Count > 0)
                {

                    IdentificationType matchingItem = identificationList.FirstOrDefault
                        (il => (
                                NiemStringHelper<TextType>.FirstValue(il.IdentificationCategories)
                                .Equals(PolicyConstants.BAR_NUMBER)
                                )
                        );
                    if (matchingItem != null)
                    {
                        barNumber = NiemStringHelper<Niem.Proxy.xsd.v20.String>.FirstValue(matchingItem.IdentificationID);
                    }
                }
                return barNumber;
            }
        }

        [System.Xml.Serialization.XmlIgnore()]
        public string EportalPassword
        {
            get
            {
                string eportalPassword= null;
                List<IdentificationType> identificationList = this.PersonOtherIdentification;
                if (identificationList != null && identificationList.Count > 0)
                {

                    IdentificationType matchingItem = identificationList.FirstOrDefault
                        (il => (
                                NiemStringHelper<TextType>.FirstValue(il.IdentificationCategories)
                                .Equals(PolicyConstants.EPORTAL_PASSWORD)
                                )
                        );
                    if (matchingItem != null)
                    {
                        eportalPassword = NiemStringHelper<Niem.Proxy.xsd.v20.String>.FirstValue(matchingItem.IdentificationID);
                    }
                }
                return eportalPassword;
            }
        }



    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3053")]
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName = "PersonAssociationType", Namespace = "urn:oasis:names:tc:legalxml-courtfiling:schema:xsd:CommonTypes-4.0")]
    [System.Xml.Serialization.XmlRootAttribute("PersonAssociation", Namespace = "urn:oasis:names:tc:legalxml-courtfiling:schema:xsd:CommonTypes-4.0", IsNullable = false, ElementName = "PersonAssociationType")]
    
    public partial class PersonAssociationType : Niem.NiemCore.v20.PersonAssociationType
    {

        /// <remarks/>
        private TextType entityAssociationTypeCode;

        public PersonAssociationType()
        {
        }

        public PersonAssociationType(TextType entityAssociationTypeCode)
        {
            this.entityAssociationTypeCode = entityAssociationTypeCode;
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 0, ElementName = "EntityAssociationTypeCode")]
        public TextType EntityAssociationTypeCode
        {
            get
            {
                return this.entityAssociationTypeCode;
            }
            set
            {
                if ((value == null))
                {
                    throw new System.ArgumentNullException("EntityAssociationTypeCode");
                }
                if ((this.entityAssociationTypeCode != value))
                {
                    this.entityAssociationTypeCode = value;
                    this.RaisePropertyChanged("EntityAssociationTypeCode");
                }
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3053")]
    
    // [System.Diagnostics.DebuggerStepThroughAttribute()]

    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:oasis:names:tc:legalxml-courtfiling:schema:xsd:CommonTypes-4.0", TypeName = "PersonAugmentationType")]
    [System.Xml.Serialization.XmlRootAttribute("PersonAugmentation", Namespace = "urn:oasis:names:tc:legalxml-courtfiling:schema:xsd:CommonTypes-4.0", IsNullable = false, ElementName = "PersonAugmentationType")]
    
    public partial class PersonAugmentationType : AugmentationType
    {

        /// <remarks/>
        private DriverLicenseType personDriverLicense;

        /// <remarks/>
        private System.Collections.Generic.List<InsuranceType> personInsurance;

        /// <remarks/>
        private ElectronicServiceInformationType electronicServiceInformation;

        /// <remarks/>
        private System.Collections.Generic.List<ContactInformationType> contactInformation;

        /// <remarks/>
        private System.Collections.Generic.List<PersonContactInformationAssociationType> personContactInformationAssociation;

        public PersonAugmentationType()
        {
        }

        public PersonAugmentationType(Oasis.LegalXml.CourtFiling.v40.EcfHelperTypes.ContactInformationType contactInformation)
        {
            if (contactInformation != null)
            {
                this.contactInformation = new System.Collections.Generic.List<ContactInformationType>
                {
                    new ContactInformationType(contactInformation)  
                };
            }
        }

        public PersonAugmentationType(string address1, string address2, string city, string state, string zipCode, string phoneNumber, string extension, string emailAddress)
            : this
             (
                   new Oasis.LegalXml.CourtFiling.v40.EcfHelperTypes.ContactInformationType
                   {
                        Address1 = address1,
                        Address2  = address2 ,
                        City = city,
                        State = state ,
                        ZipCode = zipCode ,
                        PrimaryPhoneNumber = phoneNumber ,
                        PhoneNumberExtension = extension ,
                        EmailAddress = emailAddress
                   }
            )
        {

        }

        public void ToSimpleType(out Oasis.LegalXml.CourtFiling.v40.EcfHelperTypes.ContactInformationType contactInformation)
        {
            contactInformation = null;
            if (this.contactInformation != null && this.contactInformation.Count > 0)
            {
                this.contactInformation[0].ToSimpleType(out contactInformation);
            }
        }
        public void  ToSimpleType
            (out string address1, out string address2, out string city, out string state, out string zipCode, out string addressFullText,  out string phoneNumber, out string extension, out string emailAddress)
        {
            address1 = string.Empty;
            address2 = string.Empty;
            city = string.Empty;
            state = string.Empty;
            zipCode = string.Empty;
            addressFullText = string.Empty;
            phoneNumber = string.Empty;
            emailAddress = string.Empty;
            extension = string.Empty;

            if ( this.contactInformation != null &&   this.contactInformation.Count > 0 )
            {
                this.contactInformation[0].ToSimpleType(out address1, out address2, out city, out state, out zipCode, out addressFullText ,out phoneNumber, out extension , out emailAddress );
            }

        }

        public PersonAugmentationType(DriverLicenseType personDriverLicense, System.Collections.Generic.List<InsuranceType> personInsurance, ElectronicServiceInformationType electronicServiceInformation, System.Collections.Generic.List<ContactInformationType> contactInformation, System.Collections.Generic.List<PersonContactInformationAssociationType> personContactInformationAssociation)
        {
            this.personDriverLicense = personDriverLicense;
            this.personInsurance = personInsurance;
            this.electronicServiceInformation = electronicServiceInformation;
            this.contactInformation = contactInformation;
            this.personContactInformationAssociation = personContactInformationAssociation;
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 0, ElementName = "PersonDriverLicense")]
        public DriverLicenseType PersonDriverLicense
        {
            get
            {
                return this.personDriverLicense;
            }
            set
            {
                if ((value == null))
                {
                    throw new System.ArgumentNullException("PersonDriverLicense");
                }
                if ((this.personDriverLicense != value))
                {
                    this.personDriverLicense = value;
                    this.RaisePropertyChanged("PersonDriverLicense");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("PersonInsurance", Order = 1)]
        public System.Collections.Generic.List<InsuranceType> PersonInsurance
        {
            get
            {
                return this.personInsurance;
            }
            set
            {
                if ((this.personInsurance != value))
                {
                    this.personInsurance = value;
                    this.RaisePropertyChanged("PersonInsurance");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 2, ElementName = "ElectronicServiceInformation")]
        public ElectronicServiceInformationType ElectronicServiceInformation
        {
            get
            {
                return this.electronicServiceInformation;
            }
            set
            {
                if ((value == null))
                {
                    throw new System.ArgumentNullException("ElectronicServiceInformation");
                }
                if ((this.electronicServiceInformation != value))
                {
                    this.electronicServiceInformation = value;
                    this.RaisePropertyChanged("ElectronicServiceInformation");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("ContactInformation", Namespace = "http://niem.gov/niem/niem-core/2.0", IsNullable = true, Order = 3)]
        public System.Collections.Generic.List<ContactInformationType> ContactInformation
        {
            get
            {
                return this.contactInformation;
            }
            set
            {
                if ((this.contactInformation != value))
                {
                    this.contactInformation = value;
                    this.RaisePropertyChanged("ContactInformation");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("PersonContactInformationAssociation", Namespace = "http://niem.gov/niem/niem-core/2.0", IsNullable = true, Order = 4)]
        public System.Collections.Generic.List<PersonContactInformationAssociationType> PersonContactInformationAssociation
        {
            get
            {
                return this.personContactInformationAssociation;
            }
            set
            {
                if ((this.personContactInformationAssociation != value))
                {
                    this.personContactInformationAssociation = value;
                    this.RaisePropertyChanged("PersonContactInformationAssociation");
                }
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3053")]
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName = "InsuranceType", Namespace = "urn:oasis:names:tc:legalxml-courtfiling:schema:xsd:CommonTypes-4.0")]
    [System.Xml.Serialization.XmlRootAttribute("PersonInsurance", Namespace = "urn:oasis:names:tc:legalxml-courtfiling:schema:xsd:CommonTypes-4.0", IsNullable = false, ElementName = "InsuranceType")]
    
    public partial class InsuranceType :  Niem.NiemCore.v20.InsuranceType
    {

        /// <remarks/>
        private Boolean insuranceProofIndicator;

        public InsuranceType()
        {
        }

        public InsuranceType(Boolean insuranceProofIndicator)
        {
            this.insuranceProofIndicator = insuranceProofIndicator;
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 0, ElementName = "InsuranceProofIndicator")]
        public Boolean InsuranceProofIndicator
        {
            get
            {
                return this.insuranceProofIndicator;
            }
            set
            {
                if ((value == null))
                {
                    throw new System.ArgumentNullException("InsuranceProofIndicator");
                }
                if ((this.insuranceProofIndicator != value))
                {
                    this.insuranceProofIndicator = value;
                    this.RaisePropertyChanged("InsuranceProofIndicator");
                }
            }
        }
    }


    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3053")]
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]

    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:oasis:names:tc:legalxml-courtfiling:schema:xsd:CommonTypes-4.0", TypeName = "CourtEventActorType")]
    [System.Xml.Serialization.XmlRootAttribute("CourtEventActor", Namespace = "urn:oasis:names:tc:legalxml-courtfiling:schema:xsd:CommonTypes-4.0", IsNullable = false, ElementName = "CourtEventActorType")]
    
    public partial class CourtEventActorType : ComplexObjectType
    {

        /// <remarks/>
        private ReferenceType actorRole;

        /// <remarks/>
        private RoleChoiceType roleChoiceName;

        public CourtEventActorType()
        {
        }

        public CourtEventActorType(ReferenceType actorRole, RoleChoiceType roleChoiceName)
        {
            this.actorRole = actorRole;
            this.roleChoiceName = roleChoiceName;
        }

        [System.Xml.Serialization.XmlElementAttribute("RoleOfItemReference", typeof(ReferenceType), Namespace = "http://niem.gov/niem/niem-core/2.0", Order = 0)]
        [System.Xml.Serialization.XmlElementAttribute("RoleOfOrganizationReference", typeof(ReferenceType), Namespace = "http://niem.gov/niem/niem-core/2.0", Order = 0)]
        [System.Xml.Serialization.XmlElementAttribute("RoleOfPersonReference", typeof(ReferenceType), Namespace = "http://niem.gov/niem/niem-core/2.0", Order = 0)]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("RoleChoiceName")]
        public ReferenceType ActorRole
        {
            get
            {
                return this.actorRole;
            }
            set
            {
                if ((value == null))
                {
                    throw new System.ArgumentNullException("ActorRole");
                }
                if ((this.actorRole != value))
                {
                    this.actorRole = value;
                    this.RaisePropertyChanged("ActorRole");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public RoleChoiceType RoleChoiceName
        {
            get
            {
                return this.roleChoiceName;
            }
            set
            {
                if ((this.roleChoiceName != value))
                {
                    this.roleChoiceName = value;
                    this.RaisePropertyChanged("RoleChoiceName");
                }
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3053")]
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName = "CourtEventType", Namespace = "urn:oasis:names:tc:legalxml-courtfiling:schema:xsd:CommonTypes-4.0")]
    [System.Xml.Serialization.XmlRootAttribute("CaseCourtEvent", Namespace = "urn:oasis:names:tc:legalxml-courtfiling:schema:xsd:CommonTypes-4.0", IsNullable = false, ElementName = "CourtEventType")]
    
    public partial class CourtEventType : Niem.Domains.Jxdm.v40.CourtEventType
    {

        /// <remarks/>
        private System.Collections.Generic.List<ReferenceType> childDocketReference;

        /// <remarks/>
        private DateType courtEventEnteredOnDocketDate;

        /// <remarks/>
        private TextType courtEventTypeCode;

        /// <remarks/>
        private CourtEventDocumentType courtEventDocument;

        /// <remarks/>
        private CourtEventActorType courtEventActor;

        /// <remarks/>
        private CourtEventOnBehalfOfActorType courtEventOnBehalfOfActor;

        /// <remarks/>
        private TextType courtEventLocationCode;

        /// <remarks/>
        private TextType courtEventLocationText;

        public CourtEventType()
        {
        }

        public CourtEventType(System.Collections.Generic.List<ReferenceType> childDocketReference, DateType courtEventEnteredOnDocketDate, TextType courtEventTypeCode, CourtEventDocumentType courtEventDocument, CourtEventActorType courtEventActor, CourtEventOnBehalfOfActorType courtEventOnBehalfOfActor, TextType courtEventLocationCode, TextType courtEventLocationText)
        {
            this.childDocketReference = childDocketReference;
            this.courtEventEnteredOnDocketDate = courtEventEnteredOnDocketDate;
            this.courtEventTypeCode = courtEventTypeCode;
            this.courtEventDocument = courtEventDocument;
            this.courtEventActor = courtEventActor;
            this.courtEventOnBehalfOfActor = courtEventOnBehalfOfActor;
            this.courtEventLocationCode = courtEventLocationCode;
            this.courtEventLocationText = courtEventLocationText;
        }

        [System.Xml.Serialization.XmlElementAttribute("ChildDocketReference", Order = 0)]
        public System.Collections.Generic.List<ReferenceType> ChildDocketReference
        {
            get
            {
                return this.childDocketReference;
            }
            set
            {
                if ((this.childDocketReference != value))
                {
                    this.childDocketReference = value;
                    this.RaisePropertyChanged("ChildDocketReference");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 1, ElementName = "CourtEventEnteredOnDocketDate")]
        public DateType CourtEventEnteredOnDocketDate
        {
            get
            {
                return this.courtEventEnteredOnDocketDate;
            }
            set
            {
                if ((value == null))
                {
                    throw new System.ArgumentNullException("CourtEventEnteredOnDocketDate");
                }
                if ((this.courtEventEnteredOnDocketDate != value))
                {
                    this.courtEventEnteredOnDocketDate = value;
                    this.RaisePropertyChanged("CourtEventEnteredOnDocketDate");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 2, ElementName = "CourtEventTypeCode")]
        public TextType CourtEventTypeCode
        {
            get
            {
                return this.courtEventTypeCode;
            }
            set
            {
                if ((value == null))
                {
                    throw new System.ArgumentNullException("CourtEventTypeCode");
                }
                if ((this.courtEventTypeCode != value))
                {
                    this.courtEventTypeCode = value;
                    this.RaisePropertyChanged("CourtEventTypeCode");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 3, ElementName = "CourtEventDocument")]
        public CourtEventDocumentType CourtEventDocument
        {
            get
            {
                return this.courtEventDocument;
            }
            set
            {
                if ((value == null))
                {
                    throw new System.ArgumentNullException("CourtEventDocument");
                }
                if ((this.courtEventDocument != value))
                {
                    this.courtEventDocument = value;
                    this.RaisePropertyChanged("CourtEventDocument");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 4, ElementName = "CourtEventActor")]
        public CourtEventActorType CourtEventActor
        {
            get
            {
                return this.courtEventActor;
            }
            set
            {
                if ((value == null))
                {
                    throw new System.ArgumentNullException("CourtEventActor");
                }
                if ((this.courtEventActor != value))
                {
                    this.courtEventActor = value;
                    this.RaisePropertyChanged("CourtEventActor");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 5, ElementName = "CourtEventOnBehalfOfActor")]
        public CourtEventOnBehalfOfActorType CourtEventOnBehalfOfActor
        {
            get
            {
                return this.courtEventOnBehalfOfActor;
            }
            set
            {
                if ((value == null))
                {
                    throw new System.ArgumentNullException("CourtEventOnBehalfOfActor");
                }
                if ((this.courtEventOnBehalfOfActor != value))
                {
                    this.courtEventOnBehalfOfActor = value;
                    this.RaisePropertyChanged("CourtEventOnBehalfOfActor");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 6, ElementName = "CourtEventLocationCode")]
        public TextType CourtEventLocationCode
        {
            get
            {
                return this.courtEventLocationCode;
            }
            set
            {
                if ((value == null))
                {
                    throw new System.ArgumentNullException("CourtEventLocationCode");
                }
                if ((this.courtEventLocationCode != value))
                {
                    this.courtEventLocationCode = value;
                    this.RaisePropertyChanged("CourtEventLocationCode");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 7, ElementName = "CourtEventLocationText")]
        public TextType CourtEventLocationText
        {
            get
            {
                return this.courtEventLocationText;
            }
            set
            {
                if ((value == null))
                {
                    throw new System.ArgumentNullException("CourtEventLocationText");
                }
                if ((this.courtEventLocationText != value))
                {
                    this.courtEventLocationText = value;
                    this.RaisePropertyChanged("CourtEventLocationText");
                }
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3053")]
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]

    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:oasis:names:tc:legalxml-courtfiling:schema:xsd:CommonTypes-4.0", TypeName = "CourtEventOnBehalfOfActorType")]
    [System.Xml.Serialization.XmlRootAttribute("CourtEventOnBehalfOfActor", Namespace = "urn:oasis:names:tc:legalxml-courtfiling:schema:xsd:CommonTypes-4.0", IsNullable = false, ElementName = "CourtEventOnBehalfOfActorType")]
    
    public partial class CourtEventOnBehalfOfActorType : ComplexObjectType
    {

        /// <remarks/>
        private ReferenceType onbehalfActorRole;

        /// <remarks/>
        private RoleChoiceType roleChoiceName;

        public CourtEventOnBehalfOfActorType()
        {
        }

        public CourtEventOnBehalfOfActorType(ReferenceType onbehalfActorRole, RoleChoiceType roleChoiceName)
        {
            this.onbehalfActorRole = onbehalfActorRole;
            this.roleChoiceName = roleChoiceName;
        }

        [System.Xml.Serialization.XmlElementAttribute("RoleOfItemReference", typeof(ReferenceType), Namespace = "http://niem.gov/niem/niem-core/2.0", Order = 0)]
        [System.Xml.Serialization.XmlElementAttribute("RoleOfOrganizationReference", typeof(ReferenceType), Namespace = "http://niem.gov/niem/niem-core/2.0", Order = 0)]
        [System.Xml.Serialization.XmlElementAttribute("RoleOfPersonReference", typeof(ReferenceType), Namespace = "http://niem.gov/niem/niem-core/2.0", Order = 0)]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("RoleChoiceName")]
        public ReferenceType OnbehalfActorRole
        {
            get
            {
                return this.onbehalfActorRole;
            }
            set
            {
                if ((value == null))
                {
                    throw new System.ArgumentNullException("OnbehalfActorRole");
                }
                if ((this.onbehalfActorRole != value))
                {
                    this.onbehalfActorRole = value;
                    this.RaisePropertyChanged("OnbehalfActorRole");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public RoleChoiceType RoleChoiceName
        {
            get
            {
                return this.roleChoiceName;
            }
            set
            {
                if ((this.roleChoiceName != value))
                {
                    this.roleChoiceName = value;
                    this.RaisePropertyChanged("RoleChoiceName");
                }
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3053")]
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]

    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:oasis:names:tc:legalxml-courtfiling:schema:xsd:CommonTypes-4.0", TypeName = "CourtEventDocumentType")]
    [System.Xml.Serialization.XmlRootAttribute("CourtEventDocument", Namespace = "urn:oasis:names:tc:legalxml-courtfiling:schema:xsd:CommonTypes-4.0", IsNullable = false, ElementName = "CourtEventDocumentType")]
    
    public partial class CourtEventDocumentType : DocumentType
    {

        /// <remarks/>
        private System.Collections.Generic.List<DocumentType> connectedDocument;

        public CourtEventDocumentType()
        {
        }

        public CourtEventDocumentType(System.Collections.Generic.List<DocumentType> connectedDocument)
        {
            this.connectedDocument = connectedDocument;
        }

        [System.Xml.Serialization.XmlElementAttribute("ConnectedDocument", Order = 0)]
        public System.Collections.Generic.List<DocumentType> ConnectedDocument
        {
            get
            {
                return this.connectedDocument;
            }
            set
            {
                if ((this.connectedDocument != value))
                {
                    this.connectedDocument = value;
                    this.RaisePropertyChanged("ConnectedDocument");
                }
            }
        }
    }


    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ReviewedDocumentType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CourtEventDocumentType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Arizona.Courts.Extensions.v20.DocumentType))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3053")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName = "DocumentType", Namespace = "urn:oasis:names:tc:legalxml-courtfiling:schema:xsd:CommonTypes-4.0")]
    [System.Xml.Serialization.XmlRootAttribute("Document", Namespace = "urn:oasis:names:tc:legalxml-courtfiling:schema:xsd:CommonTypes-4.0", IsNullable = false, ElementName = "DocumentType")]
    
    public partial class DocumentType : Niem.NiemCore.v20.DocumentType
    {

        /// <remarks/>
        private DocumentMetadataType documentMetadata;

        /// <remarks/>
        private System.Collections.Generic.List<DocumentRenditionType> documentRendition;

        public DocumentType()
        {
        }
        public DocumentType
            (string contentType, 
             byte[] content, 
            string contentLocalName, 
            int documentSequenceId, 
            string docketCode, 
            string docketText, 
            int? filerEportalUserId
            )
            : this
            ( 
                contentType :contentType , 
                content: content , 
                contentLocalName:contentLocalName , 
                documentSequenceId:documentSequenceId , 
                documentId:"DOC" + documentSequenceId.ToString().PadLeft(5, '0') , 
                attachmentId: "ATT" + documentSequenceId.ToString().PadLeft(5, '0') , 
                attachmentSequenceId: documentSequenceId,
                docketCode: docketCode , 
                docketText :docketText , 
                filerEportalUserId:filerEportalUserId
            )
        {
        }


        public DocumentType
            (
            string contentType, 
            byte[] content , 
            string contentLocalName, 
            int documentSequenceId , 
            string documentId , 
            int attachmentSequenceId, 
            string attachmentId,  
            string docketCode , 
            string docketText , 
            int? filerEportalUserId 
            ) : base() 
        {
            if (!string.IsNullOrEmpty(contentType) && content != null && content.Length > 0 )
            {
                this.Id = documentId;
                this.DocumentSequenceID = NiemStringHelper<Niem.Proxy.xsd.v20.String>.ToList(documentSequenceId.ToString());
                this.DocumentApplicationName = new System.Collections.Generic.List<ApplicationNameType> { new ApplicationNameType(contentType) };
                if (!string.IsNullOrEmpty(docketText)) this.DocumentDescriptionText = NiemStringHelper<Niem.NiemCore.v20.TextType>.ToList(docketText);

                // Handle Document Meta Data
                this.documentMetadata = new DocumentMetadataType();
                if (!string.IsNullOrEmpty(docketCode)) this.documentMetadata.RegisterActionDescriptionText = new Niem.NiemCore.v20.TextType(docketCode);
                if ( filerEportalUserId  != null ) this.documentMetadata.FilingPartyID = new System.Collections.Generic.List<IdentificationType> { new IdentificationType(filerEportalUserId.ToString(), Niem.NiemCore.v20.Constants.EPORTAL_IDENTIFICATION_CATEGORY_TEXT) };
                

                // Handle Document Rendition Information
                DocumentRenditionMetadataType documentRenditionMetaData = new DocumentRenditionMetadataType();
                documentRenditionMetaData.DocumentApplicationName = new System.Collections.Generic.List<ApplicationNameType> { new ApplicationNameType(contentType) };
                if (!string.IsNullOrEmpty(contentLocalName)) documentRenditionMetaData.DocumentFileControlID = new System.Collections.Generic.List<String> { new String(contentLocalName) };
                DocumentAttachmentType documentAttachment = new DocumentAttachmentType
                    (
                        attachmentSequenceID:attachmentSequenceId.ToString() ,
                        binaryData: content
                    ) ;
                 documentAttachment.Id = attachmentId;

                documentRenditionMetaData.DocumentAttachment = new System.Collections.Generic.List<DocumentAttachmentType>
                {
                      documentAttachment
                };
                this.documentRendition = new System.Collections.Generic.List<DocumentRenditionType>
                {
                    new DocumentRenditionType { DocumentRenditionMetadata = documentRenditionMetaData }
                } ;
 
            }
            
        }

        public DocumentType(DocumentMetadataType documentMetadata, System.Collections.Generic.List<DocumentRenditionType> documentRendition)
        {
            this.documentMetadata = documentMetadata;
            this.documentRendition = documentRendition;
        }

        [System.Xml.Serialization.XmlElementAttribute("DocumentMetadata", typeof(Oasis.LegalXml.CourtFiling.v40.Ecf.DocumentMetadataType), Order = 0, Namespace = "urn:oasis:names:tc:legalxml-courtfiling:schema:xsd:CommonTypes-4.0", IsNullable = true)]
        [System.Xml.Serialization.XmlElementAttribute("DocumentMetadata", typeof(Arizona.Courts.Extensions.v20.DocumentMetadataType), Order = 0, Namespace = "http://schema.azcourts.az.gov/courts/efiling/ecf/extension/2.0", IsNullable = true)]
        public DocumentMetadataType DocumentMetadata
        {
            get
            {
                return this.documentMetadata;
            }
            set
            {
                if ((value == null))
                {
                    throw new System.ArgumentNullException("DocumentMetadata");
                }
                if ((this.documentMetadata != value))
                {
                    this.documentMetadata = value;
                    this.RaisePropertyChanged("DocumentMetadata");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("DocumentRendition", Order = 1)]
        public System.Collections.Generic.List<DocumentRenditionType> DocumentRendition
        {
            get
            {
                return this.documentRendition;
            }
            set
            {
                if ((this.documentRendition != value))
                {
                    this.documentRendition = value;
                    this.RaisePropertyChanged("DocumentRendition");
                }
            }
        }

        [System.Xml.Serialization.XmlIgnore()]
        public byte[] DocumentImage
        {
            get
            {
                byte[] documentImage = (this.documentRendition != null &&
                                       this.documentRendition.Count > 0 &&
                                       this.documentRendition[0].DocumentRenditionMetadata != null &&
                                       this.documentRendition[0].DocumentRenditionMetadata.DocumentAttachment != null &&
                                       this.documentRendition[0].DocumentRenditionMetadata.DocumentAttachment.Count > 0 &&
                                       this.documentRendition[0].DocumentRenditionMetadata.DocumentAttachment[0].BinaryObjects != null &&
                                       this.documentRendition[0].DocumentRenditionMetadata.DocumentAttachment[0].BinaryObjects.Count > 0
                                       ) ?
                                       this.documentRendition[0].DocumentRenditionMetadata.DocumentAttachment[0].BinaryObjects[0].Value :
                                       null;
                return documentImage;

            }
        }
        [System.Xml.Serialization.XmlIgnore()]
        public string DocketCode
        {
            get
            {
                return (this.documentMetadata != null && this.documentMetadata.RegisterActionDescriptionText != null ? this.documentMetadata.RegisterActionDescriptionText.ToString() : string.Empty);
            }
        }

        [System.Xml.Serialization.XmlIgnore()]
        public string DocketText
        {
            get
            {
                return (this.DocumentDescriptionText != null && this.DocumentDescriptionText.Count > 0 ? this.DocumentDescriptionText[0].ToString() : string.Empty);
            }
        }

        [System.Xml.Serialization.XmlIgnore()]
        public string ClientDocumentId
        {
            get
            {
                return (
                         ( this.documentRendition  != null &&  this.documentRendition.Count > 0 && 
                           this.documentRendition[0].DocumentRenditionMetadata != null 
                          ) ? 
                          NiemStringHelper<String>.FirstValue(this.documentRendition[0].DocumentRenditionMetadata.DocumentFileControlID) : 
                          string.Empty
                );
            }
        }
        [System.Xml.Serialization.XmlIgnore()]
        public long DocketCodeId
        {
            get
            {
                long docketCodeId = -1;
                if (this.documentMetadata != null && this.documentMetadata.RegisterActionDescriptionText != null && !string.IsNullOrEmpty(this.documentMetadata.RegisterActionDescriptionText.Id))
                {
                    long.TryParse(this.documentMetadata.RegisterActionDescriptionText.Id, out docketCodeId);
                }
                return docketCodeId;  ;
            }
        }
        [System.Xml.Serialization.XmlIgnore()]
        public int NumberOfPages
        {
            get
            {
                int numberOfPages = 0;
                // string.Format("# Pages={0}", filingDocument.NumberOfPages)
                if (!string.IsNullOrEmpty(this.Metadata))
                {
                    int.TryParse(this.Metadata.Replace("# Pages=", ""), out numberOfPages);
                }
                return numberOfPages;
            }
            set
            {
                this.Metadata = string.Format("# Pages={0}", value);
            }
        }

        [System.Xml.Serialization.XmlIgnore()]
        public int FileInputId
        {
            get
            {
                int fileInputId = 0;
                
                if (this.DocumentFileControlID != null && this.DocumentFileControlID.Count > 0 )
                {
                    var matchingItem = this.DocumentFileControlID.FirstOrDefault( ns => ( !string.IsNullOrEmpty(ns.Id) && ns.Id.Equals("FileInputId")));
                    if (matchingItem != null && !string.IsNullOrEmpty(matchingItem.Value))
                    {
                        int.TryParse(matchingItem.Value, out fileInputId);
                    }
                }
                return fileInputId;
            }
        }

        [System.Xml.Serialization.XmlIgnore()]
        public int DocumentIdNumber
        {
            get
            {
                int documentIdNumber = 0;

                if (!string.IsNullOrEmpty(this.Id))
                {
                    int.TryParse(this.Id.Replace("DOC",string.Empty), out documentIdNumber);
                }
                return documentIdNumber;
            }
        }
        [System.Xml.Serialization.XmlIgnore()]
        public string CorrectionType
        {
            get
            {
                string correctionType = string.Empty;

                if (this.DocumentFileControlID != null && this.DocumentFileControlID.Count > 0)
                {
                    var matchingItem = this.DocumentFileControlID.FirstOrDefault(ns => (!string.IsNullOrEmpty(ns.Id) && ns.Id.Equals("CorrectionType")));
                    if (matchingItem != null && !string.IsNullOrEmpty(matchingItem.Value))
                    {
                        correctionType = matchingItem.Value;
                    }
                }
                return correctionType;
            }
            set
            {
               if ( this.DocumentFileControlID  == null )
               {
                   this.DocumentFileControlID  = new System.Collections.Generic.List<String>();
               }
               
               var matchingItem = this.DocumentFileControlID.FirstOrDefault(ns => (!string.IsNullOrEmpty(ns.Id) && ns.Id.Equals("CorrectionType")));
               if (matchingItem != null)
               {
                 matchingItem.Value = value;
               }
               else
               {
                   this.DocumentFileControlID.Add(new String { Id = "CorrectionType", Value = value });
               }
            }

        }


        public void SetDocumentContent(string contentType, byte[] content, string contentLocalName , int documentSequenceId , string documentId , string attachmentId)
        {
            
            if (!string.IsNullOrEmpty(contentType) && content != null && content.Length > 0)
            {
                if (this.documentMetadata != null && this.documentMetadata.ParentDocumentReference != null) this.documentMetadata.ParentDocumentReference = null;
                DocumentRenditionMetadataType documentRenditionMetaData = new DocumentRenditionMetadataType();
                documentRenditionMetaData.DocumentApplicationName = new System.Collections.Generic.List<ApplicationNameType> { new ApplicationNameType(contentType) };
                if (!string.IsNullOrEmpty(contentLocalName)) documentRenditionMetaData.DocumentFileControlID = new System.Collections.Generic.List<String> { new String(contentLocalName) };
                DocumentAttachmentType documentAttachment = new DocumentAttachmentType(documentSequenceId.ToString(), content);
                documentAttachment.Id = attachmentId;

                documentRenditionMetaData.DocumentAttachment = new System.Collections.Generic.List<DocumentAttachmentType>
                {
                      documentAttachment
                };
                this.documentRendition = new System.Collections.Generic.List<DocumentRenditionType>
                {
                    new DocumentRenditionType { DocumentRenditionMetadata = documentRenditionMetaData }
                };
            };

        }

        [System.Xml.Serialization.XmlIgnore()]
        public int NumberOfAttachments
        {
            get
            {
                return  this.documentRendition != null &&
                        this.documentRendition.Count > 0 &&
                        this.documentRendition[0].DocumentRenditionMetadata != null &&
                        this.documentRendition[0].DocumentRenditionMetadata.DocumentAttachment != null  ?
                        this.documentRendition[0].DocumentRenditionMetadata.DocumentAttachment.Count : 0 ;

            }
        }

    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3053")]
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]

    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:oasis:names:tc:legalxml-courtfiling:schema:xsd:CommonTypes-4.0", TypeName = "DocumentMetadataType")]
    [System.Xml.Serialization.XmlRootAttribute("DocumentMetadata", Namespace = "urn:oasis:names:tc:legalxml-courtfiling:schema:xsd:CommonTypes-4.0", IsNullable = false, ElementName = "DocumentMetadataType")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Arizona.Courts.Extensions.v20.DocumentMetadataType))]
    public partial class DocumentMetadataType : Niem.Structures.v20.MetadataType
    {

        /// <remarks/>
        private TextType registerActionDescriptionText;

        /// <remarks/>
        private ReferenceType parentDocumentReference;

        /// <remarks/>
        private IdentificationType priorRelatedDocumentID;

        /// <remarks/>
        private IdentificationType filingAttorneyID;

        /// <remarks/>
        private System.Collections.Generic.List<IdentificationType> filingPartyID;

        /// <remarks/>
        private TextType specialHandlingInstructions;

        /// <remarks/>
        private Boolean redactionRequiredIndicator;

        public DocumentMetadataType()
        {
        }

        public DocumentMetadataType(TextType registerActionDescriptionText, ReferenceType parentDocumentReference, IdentificationType priorRelatedDocumentID, IdentificationType filingAttorneyID, System.Collections.Generic.List<IdentificationType> filingPartyID, TextType specialHandlingInstructions, Boolean redactionRequiredIndicator)
        {
            this.registerActionDescriptionText = registerActionDescriptionText;
            this.parentDocumentReference = parentDocumentReference;
            this.priorRelatedDocumentID = priorRelatedDocumentID;
            this.filingAttorneyID = filingAttorneyID;
            this.filingPartyID = filingPartyID;
            this.specialHandlingInstructions = specialHandlingInstructions;
            this.redactionRequiredIndicator = redactionRequiredIndicator;
        }

        [System.Xml.Serialization.XmlElementAttribute(Namespace = "http://niem.gov/niem/domains/jxdm/4.0", IsNullable = true, Order = 0, ElementName = "RegisterActionDescriptionText")]
        public TextType RegisterActionDescriptionText
        {
            get
            {
                return this.registerActionDescriptionText;
            }
            set
            {
                if ((this.registerActionDescriptionText != value))
                {
                    this.registerActionDescriptionText = value;
                    this.RaisePropertyChanged("RegisterActionDescriptionText");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 1, ElementName = "ParentDocumentReference")]
        public ReferenceType ParentDocumentReference
        {
            get
            {
                return this.parentDocumentReference;
            }
            set
            {
                if ((this.parentDocumentReference != value))
                {
                    this.parentDocumentReference = value;
                    this.RaisePropertyChanged("ParentDocumentReference");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 2, ElementName = "PriorRelatedDocumentID")]
        public IdentificationType PriorRelatedDocumentID
        {
            get
            {
                return this.priorRelatedDocumentID;
            }
            set
            {
                if ((value == null))
                {
                    throw new System.ArgumentNullException("PriorRelatedDocumentID");
                }
                if ((this.priorRelatedDocumentID != value))
                {
                    this.priorRelatedDocumentID = value;
                    this.RaisePropertyChanged("PriorRelatedDocumentID");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 3, ElementName = "FilingAttorneyID")]
        public IdentificationType FilingAttorneyID
        {
            get
            {
                return this.filingAttorneyID;
            }
            set
            {
                if ((value == null))
                {
                    throw new System.ArgumentNullException("FilingAttorneyID");
                }
                if ((this.filingAttorneyID != value))
                {
                    this.filingAttorneyID = value;
                    this.RaisePropertyChanged("FilingAttorneyID");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("FilingPartyID", Order = 4)]
        public System.Collections.Generic.List<IdentificationType> FilingPartyID
        {
            get
            {
                return this.filingPartyID;
            }
            set
            {
                if ((this.filingPartyID != value))
                {
                    this.filingPartyID = value;
                    this.RaisePropertyChanged("FilingPartyID");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 5, ElementName = "SpecialHandlingInstructions")]
        public TextType SpecialHandlingInstructions
        {
            get
            {
                return this.specialHandlingInstructions;
            }
            set
            {
                if ((value == null))
                {
                    throw new System.ArgumentNullException("SpecialHandlingInstructions");
                }
                if ((this.specialHandlingInstructions != value))
                {
                    this.specialHandlingInstructions = value;
                    this.RaisePropertyChanged("SpecialHandlingInstructions");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 6, ElementName = "RedactionRequiredIndicator")]
        public Boolean RedactionRequiredIndicator
        {
            get
            {
                return this.redactionRequiredIndicator;
            }
            set
            {
                if ((value == null))
                {
                    throw new System.ArgumentNullException("RedactionRequiredIndicator");
                }
                if ((this.redactionRequiredIndicator != value))
                {
                    this.redactionRequiredIndicator = value;
                    this.RaisePropertyChanged("RedactionRequiredIndicator");
                }
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3053")]
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]

    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:oasis:names:tc:legalxml-courtfiling:schema:xsd:CommonTypes-4.0", TypeName = "DocumentRenditionMetadataType")]
    [System.Xml.Serialization.XmlRootAttribute("DocumentRenditionMetadata", Namespace = "urn:oasis:names:tc:legalxml-courtfiling:schema:xsd:CommonTypes-4.0", IsNullable = false, ElementName = "DocumentRenditionMetadataType")]
    
    public partial class DocumentRenditionMetadataType : Niem.NiemCore.v20.DocumentType
    {

        /// <remarks/>
        private System.Collections.Generic.List<DocumentAttachmentType> documentAttachment;

        /// <remarks/>
        private Boolean colorRelevantIndicator;

        /// <remarks/>
        private Boolean redactedIndicator;

        public DocumentRenditionMetadataType()
        {
        }

        public DocumentRenditionMetadataType(System.Collections.Generic.List<DocumentAttachmentType> documentAttachment, Boolean colorRelevantIndicator, Boolean redactedIndicator)
        {
            this.documentAttachment = documentAttachment;
            this.colorRelevantIndicator = colorRelevantIndicator;
            this.redactedIndicator = redactedIndicator;
        }

        [System.Xml.Serialization.XmlElementAttribute("DocumentAttachment", Order = 0)]
        public System.Collections.Generic.List<DocumentAttachmentType> DocumentAttachment
        {
            get
            {
                return this.documentAttachment;
            }
            set
            {
                if ((this.documentAttachment != value))
                {
                    this.documentAttachment = value;
                    this.RaisePropertyChanged("DocumentAttachment");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 1, ElementName = "ColorRelevantIndicator")]
        public Boolean ColorRelevantIndicator
        {
            get
            {
                return this.colorRelevantIndicator;
            }
            set
            {
                if ((value == null))
                {
                    throw new System.ArgumentNullException("ColorRelevantIndicator");
                }
                if ((this.colorRelevantIndicator != value))
                {
                    this.colorRelevantIndicator = value;
                    this.RaisePropertyChanged("ColorRelevantIndicator");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 2, ElementName = "RedactedIndicator")]
        public Boolean RedactedIndicator
        {
            get
            {
                return this.redactedIndicator;
            }
            set
            {
                if ((value == null))
                {
                    throw new System.ArgumentNullException("RedactedIndicator");
                }
                if ((this.redactedIndicator != value))
                {
                    this.redactedIndicator = value;
                    this.RaisePropertyChanged("RedactedIndicator");
                }
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3053")]
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]

    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:oasis:names:tc:legalxml-courtfiling:schema:xsd:CommonTypes-4.0", TypeName = "DocumentRenditionType")]
    [System.Xml.Serialization.XmlRootAttribute("DocumentRendition", Namespace = "urn:oasis:names:tc:legalxml-courtfiling:schema:xsd:CommonTypes-4.0", IsNullable = false, ElementName = "DocumentRenditionType")]
    
    public partial class DocumentRenditionType : Niem.NiemCore.v20.DocumentType
    {

        /// <remarks/>
        private System.Collections.Generic.List<DocumentSignatureType> documentSignature;

        /// <remarks/>
        private DocumentRenditionMetadataType documentRenditionMetadata;

        public DocumentRenditionType()
        {
        }

        public DocumentRenditionType(System.Collections.Generic.List<DocumentSignatureType> documentSignature, DocumentRenditionMetadataType documentRenditionMetadata)
        {
            this.documentSignature = documentSignature;
            this.documentRenditionMetadata = documentRenditionMetadata;
        }

        [System.Xml.Serialization.XmlElementAttribute("DocumentSignature", Order = 0)]
        public System.Collections.Generic.List<DocumentSignatureType> DocumentSignature
        {
            get
            {
                return this.documentSignature;
            }
            set
            {
                if ((this.documentSignature != value))
                {
                    this.documentSignature = value;
                    this.RaisePropertyChanged("DocumentSignature");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 1, ElementName = "DocumentRenditionMetadata")]
        public DocumentRenditionMetadataType DocumentRenditionMetadata
        {
            get
            {
                return this.documentRenditionMetadata;
            }
            set
            {
                if ((value == null))
                {
                    throw new System.ArgumentNullException("DocumentRenditionMetadata");
                }
                if ((this.documentRenditionMetadata != value))
                {
                    this.documentRenditionMetadata = value;
                    this.RaisePropertyChanged("DocumentRenditionMetadata");
                }
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3053")]
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]

    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:oasis:names:tc:legalxml-courtfiling:schema:xsd:CommonTypes-4.0", TypeName = "DocumentSignatureType")]
    [System.Xml.Serialization.XmlRootAttribute("DocumentSignature", Namespace = "urn:oasis:names:tc:legalxml-courtfiling:schema:xsd:CommonTypes-4.0", IsNullable = false, ElementName = "DocumentSignatureType")]
    
    public partial class DocumentSignatureType : ComplexObjectType
    {

        /// <remarks/>
        private TextType signatureProfileID;

        /// <remarks/>
        private SignatureType signature;

        public DocumentSignatureType()
        {
        }

        public DocumentSignatureType(TextType signatureProfileID, SignatureType signature)
        {
            this.signatureProfileID = signatureProfileID;
            this.signature = signature;
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 0, ElementName = "SignatureProfileID")]
        public TextType SignatureProfileID
        {
            get
            {
                return this.signatureProfileID;
            }
            set
            {
                if ((value == null))
                {
                    throw new System.ArgumentNullException("SignatureProfileID");
                }
                if ((this.signatureProfileID != value))
                {
                    this.signatureProfileID = value;
                    this.RaisePropertyChanged("SignatureProfileID");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 1, ElementName = "Signature")]
        public SignatureType Signature
        {
            get
            {
                return this.signature;
            }
            set
            {
                if ((value == null))
                {
                    throw new System.ArgumentNullException("Signature");
                }
                if ((this.signature != value))
                {
                    this.signature = value;
                    this.RaisePropertyChanged("Signature");
                }
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3053")]
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]

    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:oasis:names:tc:legalxml-courtfiling:schema:xsd:CommonTypes-4.0", TypeName = "DocumentAttachmentType")]
    [System.Xml.Serialization.XmlRootAttribute("DocumentAttachment", Namespace = "urn:oasis:names:tc:legalxml-courtfiling:schema:xsd:CommonTypes-4.0", IsNullable = false, ElementName = "DocumentAttachmentType")]
    
    public partial class DocumentAttachmentType : BinaryType
    {

        /// <remarks/>
        private String attachmentSequenceID;

        public DocumentAttachmentType()
        {
        }

        public DocumentAttachmentType(String attachmentSequenceID)
        {
            this.attachmentSequenceID = attachmentSequenceID;
        }

        public DocumentAttachmentType(System.String attachmentSequenceID , byte[] binaryData)
        {
            if (!string.IsNullOrEmpty(attachmentSequenceID) && binaryData != null && binaryData.Length > 0)
            {
                this.attachmentSequenceID = new String(attachmentSequenceID);
                this.BinaryObjects = new System.Collections.Generic.List<Base64Binary> { new Base64Binary(binaryData)  };
                this.BinarySizeValue = new System.Collections.Generic.List<NonNegativeDecimalType> { new NonNegativeDecimalType(binaryData.Length) };
            }
            
        }


        [System.Xml.Serialization.XmlElementAttribute(Order = 0, ElementName = "AttachmentSequenceID")]
        public String AttachmentSequenceID
        {
            get
            {
                return this.attachmentSequenceID;
            }
            set
            {
                if ((value == null))
                {
                    throw new System.ArgumentNullException("AttachmentSequenceID");
                }
                if ((this.attachmentSequenceID != value))
                {
                    this.attachmentSequenceID = value;
                    this.RaisePropertyChanged("AttachmentSequenceID");
                }
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3053")]
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]

    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:oasis:names:tc:legalxml-courtfiling:schema:xsd:CommonTypes-4.0", TypeName = "SignatureType")]
    [System.Xml.Serialization.XmlRootAttribute("Signature", Namespace = "urn:oasis:names:tc:legalxml-courtfiling:schema:xsd:CommonTypes-4.0", IsNullable = false, ElementName = "SignatureType")]
    
    public partial class SignatureType : ComplexObjectType
    {

        /// <remarks/>
        private System.Xml.XmlElement any;

        public SignatureType()
        {
        }

        public SignatureType(System.Xml.XmlElement any)
        {
            this.any = any;
        }

        [System.Xml.Serialization.XmlAnyElementAttribute(Order = 0)]
        public System.Xml.XmlElement Any
        {
            get
            {
                return this.any;
            }
            set
            {
                if ((this.any != value))
                {
                    this.any = value;
                    this.RaisePropertyChanged("Any");
                }
            }
        }
    }


    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3053")]
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName = "SubjectType", Namespace = "urn:oasis:names:tc:legalxml-courtfiling:schema:xsd:CommonTypes-4.0")]
    [System.Xml.Serialization.XmlRootAttribute("SubjectType", Namespace = "urn:oasis:names:tc:legalxml-courtfiling:schema:xsd:CommonTypes-4.0", IsNullable = true, ElementName = "SubjectType")]
    
    public partial class SubjectType : Niem.Domains.Jxdm.v40.SubjectType
    {

        /// <remarks/>
        private PersonAugmentationType personAugmentation;

        /// <remarks/>
        private IdentificationType subjectICEIdentification;

        public SubjectType()
        {
        }

        public SubjectType(PersonAugmentationType personAugmentation, IdentificationType subjectICEIdentification)
        {
            this.personAugmentation = personAugmentation;
            this.subjectICEIdentification = subjectICEIdentification;
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 0, ElementName = "PersonAugmentation")]
        public PersonAugmentationType PersonAugmentation
        {
            get
            {
                return this.personAugmentation;
            }
            set
            {
                if ((value == null))
                {
                    throw new System.ArgumentNullException("PersonAugmentation");
                }
                if ((this.personAugmentation != value))
                {
                    this.personAugmentation = value;
                    this.RaisePropertyChanged("PersonAugmentation");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 1, ElementName = "SubjectICEIdentification")]
        public IdentificationType SubjectICEIdentification
        {
            get
            {
                return this.subjectICEIdentification;
            }
            set
            {
                if ((value == null))
                {
                    throw new System.ArgumentNullException("SubjectICEIdentification");
                }
                if ((this.subjectICEIdentification != value))
                {
                    this.subjectICEIdentification = value;
                    this.RaisePropertyChanged("SubjectICEIdentification");
                }
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3053")]
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName = "OrganizationType", Namespace = "urn:oasis:names:tc:legalxml-courtfiling:schema:xsd:CommonTypes-4.0")]
    [System.Xml.Serialization.XmlRootAttribute("EntityOrganization", Namespace = "urn:oasis:names:tc:legalxml-courtfiling:schema:xsd:CommonTypes-4.0", IsNullable = false, ElementName = "OrganizationType")]
    
    public partial class OrganizationType : Niem.NiemCore.v20.OrganizationType
    {

        /// <remarks/>
        private OrganizationAugmentationType organizationAugmentation;


        public OrganizationType()
        {
        }

        public OrganizationType(OrganizationAugmentationType organizationAugmentation)
        {
            this.organizationAugmentation = organizationAugmentation;
        }
        
        public OrganizationType
            (
                string id, 
                string eportalOrganizationId, 
                string name, 
                string eportalUnitId, 
                string unitName, 
                string eportalSubUnitId, 
                string subUnitName, 
                string address1, 
                string address2, 
                string city, 
                string state, 
                string zipCode, 
                string phoneNumber, 
                string extension, 
                string emailAddress
            )
            : this
            (
               new Oasis.LegalXml.CourtFiling.v40.EcfHelperTypes.OrganizationType
               {
                   Id = id,
                   EportalOrganizationId = eportalOrganizationId,
                   Name = name,
                   EportalUnitId = eportalUnitId,
                   UnitName = unitName,
                   EportalSubUnitId = eportalSubUnitId,
                   SubUnitName = subUnitName,
                   ContactInformation = new Oasis.LegalXml.CourtFiling.v40.EcfHelperTypes.ContactInformationType
                   {
                       Address1 = address1,
                       Address2 = address2,
                       City = city,
                       State = state,
                       ZipCode = zipCode,
                       PrimaryPhoneNumber = phoneNumber,
                       PhoneNumberExtension = extension,
                       EmailAddress = emailAddress

                   }
               }
            )
        {

        }
         
        public OrganizationType(Oasis.LegalXml.CourtFiling.v40.EcfHelperTypes.OrganizationType organization) : base(organization:organization)
        {
            
        }
        

        [System.Xml.Serialization.XmlElementAttribute(Namespace = "http://niem.gov/niem/domains/jxdm/4.0", Order = 0, ElementName = "OrganizationAugmentation")]
        public OrganizationAugmentationType OrganizationAugmentation
        {
            get
            {
                return this.organizationAugmentation;
            }
            set
            {
                if ((value == null))
                {
                    throw new System.ArgumentNullException("OrganizationAugmentation");
                }
                if ((this.organizationAugmentation != value))
                {
                    this.organizationAugmentation = value;
                    this.RaisePropertyChanged("OrganizationAugmentation");
                }
            }
        }

    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3053")]
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]

    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:oasis:names:tc:legalxml-courtfiling:schema:xsd:CommonTypes-4.0", TypeName = "OrganizationAugmentationType")]
    [System.Xml.Serialization.XmlRootAttribute("OrganizationAugmentation", Namespace = "urn:oasis:names:tc:legalxml-courtfiling:schema:xsd:CommonTypes-4.0", IsNullable = false, ElementName = "OrganizationAugmentationType")]
    
    public partial class OrganizationAugmentationType : AugmentationType
    {

        /// <remarks/>
        private ElectronicServiceInformationType electronicServiceInformation;

        /// <remarks/>
        private System.Collections.Generic.List<ContactInformationType> contactInformation;

        /// <remarks/>
        private System.Collections.Generic.List<OrganizationContactInformationAssociationType> organizationContactInformationAssociation;

        public OrganizationAugmentationType()
        {
        }

        public OrganizationAugmentationType(ElectronicServiceInformationType electronicServiceInformation, System.Collections.Generic.List<ContactInformationType> contactInformation, System.Collections.Generic.List<OrganizationContactInformationAssociationType> organizationContactInformationAssociation)
        {
            this.electronicServiceInformation = electronicServiceInformation;
            this.contactInformation = contactInformation;
            this.organizationContactInformationAssociation = organizationContactInformationAssociation;
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 0, ElementName = "ElectronicServiceInformation")]
        public ElectronicServiceInformationType ElectronicServiceInformation
        {
            get
            {
                return this.electronicServiceInformation;
            }
            set
            {
                if ((value == null))
                {
                    throw new System.ArgumentNullException("ElectronicServiceInformation");
                }
                if ((this.electronicServiceInformation != value))
                {
                    this.electronicServiceInformation = value;
                    this.RaisePropertyChanged("ElectronicServiceInformation");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("ContactInformation", Namespace = "http://niem.gov/niem/niem-core/2.0", IsNullable = true, Order = 1)]
        public System.Collections.Generic.List<ContactInformationType> ContactInformation
        {
            get
            {
                return this.contactInformation;
            }
            set
            {
                if ((this.contactInformation != value))
                {
                    this.contactInformation = value;
                    this.RaisePropertyChanged("ContactInformation");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("OrganizationContactInformationAssociation", Namespace = "http://niem.gov/niem/niem-core/2.0", IsNullable = true, Order = 2)]
        public System.Collections.Generic.List<OrganizationContactInformationAssociationType> OrganizationContactInformationAssociation
        {
            get
            {
                return this.organizationContactInformationAssociation;
            }
            set
            {
                if ((this.organizationContactInformationAssociation != value))
                {
                    this.organizationContactInformationAssociation = value;
                    this.RaisePropertyChanged("OrganizationContactInformationAssociation");
                }
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3053")]
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]

    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:oasis:names:tc:legalxml-courtfiling:schema:xsd:CommonTypes-4.0", TypeName = "ErrorType")]
    [System.Xml.Serialization.XmlRootAttribute("Error", Namespace = "urn:oasis:names:tc:legalxml-courtfiling:schema:xsd:CommonTypes-4.0", IsNullable = false, ElementName = "ErrorType")]
    
    public partial class ErrorType : ComplexObjectType
    {

        /// <remarks/>
        private TextType errorCode;

        /// <remarks/>
        private TextType errorText;

        public ErrorType()
        {
        }

        public ErrorType(string errorCode, string errorText)
        {
            this.errorCode = new TextType(errorCode);
            this.errorText = new TextType(errorText);
        }

        public ErrorType(TextType errorCode, TextType errorText)
        {
            this.errorCode = errorCode;
            this.errorText = errorText;
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 0, ElementName = "ErrorCode")]
        public TextType ErrorCode
        {
            get
            {
                return this.errorCode;
            }
            set
            {
                if ((value == null))
                {
                    throw new System.ArgumentNullException("ErrorCode");
                }
                if ((this.errorCode != value))
                {
                    this.errorCode = value;
                    this.RaisePropertyChanged("ErrorCode");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 1, ElementName = "ErrorText")]
        public TextType ErrorText
        {
            get
            {
                return this.errorText;
            }
            set
            {
                if ((value == null))
                {
                    throw new System.ArgumentNullException("ErrorText");
                }
                if ((this.errorText != value))
                {
                    this.errorText = value;
                    this.RaisePropertyChanged("ErrorText");
                }
            }
        }
    }


    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3053")]
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName = "PersonOrganizationAssociationType", Namespace = "urn:oasis:names:tc:legalxml-courtfiling:schema:xsd:CommonTypes-4.0")]
    [System.Xml.Serialization.XmlRootAttribute("PersonOrganizationAssociation", Namespace = "urn:oasis:names:tc:legalxml-courtfiling:schema:xsd:CommonTypes-4.0", IsNullable = false, ElementName = "PersonOrganizationAssociationType")]
    
    public partial class PersonOrganizationAssociationType : Niem.NiemCore.v20.PersonOrganizationAssociationType
    {

        /// <remarks/>
        private TextType entityAssociationTypeCode;

        public PersonOrganizationAssociationType()
        {
        }

        public PersonOrganizationAssociationType(TextType entityAssociationTypeCode)
        {
            this.entityAssociationTypeCode = entityAssociationTypeCode;
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 0, ElementName = "EntityAssociationTypeCode")]
        public TextType EntityAssociationTypeCode
        {
            get
            {
                return this.entityAssociationTypeCode;
            }
            set
            {
                if ((value == null))
                {
                    throw new System.ArgumentNullException("EntityAssociationTypeCode");
                }
                if ((this.entityAssociationTypeCode != value))
                {
                    this.entityAssociationTypeCode = value;
                    this.RaisePropertyChanged("EntityAssociationTypeCode");
                }
            }
        }
    }


    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3053")]
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName = "OrganizationAssociationType", Namespace = "urn:oasis:names:tc:legalxml-courtfiling:schema:xsd:CommonTypes-4.0")]
    [System.Xml.Serialization.XmlRootAttribute("OrganizationAssociation", Namespace = "urn:oasis:names:tc:legalxml-courtfiling:schema:xsd:CommonTypes-4.0", IsNullable = false, ElementName = "OrganizationAssociationType")]
    
    public partial class OrganizationAssociationType : Niem.NiemCore.v20.OrganizationAssociationType
    {

        /// <remarks/>
        private TextType entityAssociationTypeCode;

        public OrganizationAssociationType()
        {
        }

        public OrganizationAssociationType(TextType entityAssociationTypeCode)
        {
            this.entityAssociationTypeCode = entityAssociationTypeCode;
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 0, ElementName = "EntityAssociationTypeCode")]
        public TextType EntityAssociationTypeCode
        {
            get
            {
                return this.entityAssociationTypeCode;
            }
            set
            {
                if ((value == null))
                {
                    throw new System.ArgumentNullException("EntityAssociationTypeCode");
                }
                if ((this.entityAssociationTypeCode != value))
                {
                    this.entityAssociationTypeCode = value;
                    this.RaisePropertyChanged("EntityAssociationTypeCode");
                }
            }
        }
    }


    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3053")]
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]

    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:oasis:names:tc:legalxml-courtfiling:schema:xsd:CommonTypes-4.0", TypeName = "RelatedCaseAssociationType")]
    [System.Xml.Serialization.XmlRootAttribute("RelatedCaseAssociation", Namespace = "urn:oasis:names:tc:legalxml-courtfiling:schema:xsd:CommonTypes-4.0", IsNullable = false, ElementName = "RelatedCaseAssociationType")]
    
    public partial class RelatedCaseAssociationType : RelatedActivityAssociationType
    {

        /// <remarks/>
        private TextType caseAssociationTypeCode;

        public RelatedCaseAssociationType()
        {
        }

        public RelatedCaseAssociationType(TextType caseAssociationTypeCode)
        {
            this.caseAssociationTypeCode = caseAssociationTypeCode;
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 0, ElementName = "CaseAssociationTypeCode")]
        public TextType CaseAssociationTypeCode
        {
            get
            {
                return this.caseAssociationTypeCode;
            }
            set
            {
                if ((value == null))
                {
                    throw new System.ArgumentNullException("CaseAssociationTypeCode");
                }
                if ((this.caseAssociationTypeCode != value))
                {
                    this.caseAssociationTypeCode = value;
                    this.RaisePropertyChanged("CaseAssociationTypeCode");
                }
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3053")]
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]

    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:oasis:names:tc:legalxml-courtfiling:schema:xsd:CommonTypes-4.0", TypeName = "ReviewedDocumentType")]
    [System.Xml.Serialization.XmlRootAttribute("ReviewedLeadDocument", Namespace = "urn:oasis:names:tc:legalxml-courtfiling:schema:xsd:CommonTypes-4.0", IsNullable = false, ElementName = "ReviewedDocumentType")]

    public partial class ReviewedDocumentType : Oasis.LegalXml.CourtFiling.v40.Ecf.DocumentType
    {


        /// <remarks/>
        private TextType documentHashText;

        /// <remarks/>
        private IdentificationType documentDocketID;

        /// <remarks/>
        private Boolean sealDocumentIndicator;

        public ReviewedDocumentType()
        {
        }

        public ReviewedDocumentType
            (
                string contentType, 
                byte[] content, 
                string contentLocalName, 
                int documentSequenceId, 
                string docketCode, 
                string docketText
            ) : 
            base
            (
                contentType:contentType , 
                content :content , 
                contentLocalName:contentLocalName , 
                documentSequenceId:documentSequenceId ,
                documentId :"REVIEWEDDOC" + documentSequenceId.ToString().PadLeft(5, '0') , 
                attachmentId:"REVIEWEDATT" + documentSequenceId.ToString().PadLeft(5, '0') ,
                attachmentSequenceId: documentSequenceId , 
                docketCode:docketCode, 
                docketText:docketText, 
                filerEportalUserId:null
            )
        {

        }

        public ReviewedDocumentType(int documentSequenceId, string docketCode, string docketText , string parentDocumentId) 
        {
            this.Id = "REVIEWEDDOC" + documentSequenceId.ToString().PadLeft(5, '0');
            this.DocumentSequenceID = NiemStringHelper<Niem.Proxy.xsd.v20.String>.ToList(documentSequenceId.ToString());
            if (!string.IsNullOrEmpty(docketText)) this.DocumentDescriptionText = NiemStringHelper<Niem.NiemCore.v20.TextType>.ToList(docketText);

            // Handle Document Meta Data
            this.DocumentMetadata = new DocumentMetadataType();
            if (!string.IsNullOrEmpty(docketCode)) this.DocumentMetadata.RegisterActionDescriptionText = new Niem.NiemCore.v20.TextType(docketCode);

            this.DocumentMetadata.ParentDocumentReference = new ReferenceType(parentDocumentId);
        }


        public ReviewedDocumentType(Oasis.LegalXml.CourtFiling.v40.Ecf.DocumentType ecfDocument) 
        {
            if (ecfDocument != null)
            {
                this.DocumentApplicationName = ecfDocument.DocumentApplicationName;
                this.DocumentBinary = ecfDocument.DocumentBinary;
                this.DocumentDescriptionText = ecfDocument.DocumentDescriptionText;
                this.DocumentEffectiveDate = ecfDocument.DocumentEffectiveDate;
                this.DocumentFileControlID = ecfDocument.DocumentFileControlID;
                this.DocumentFiledDate = ecfDocument.DocumentFiledDate;
                this.DocumentIdentification = ecfDocument.DocumentIdentification;
                this.DocumentInformationCutOffDate = ecfDocument.DocumentInformationCutOffDate;
                this.DocumentLanguageCode = ecfDocument.DocumentLanguageCode;
                this.DocumentMetadata = ecfDocument.DocumentMetadata;
                this.DocumentPostDate = ecfDocument.DocumentPostDate;
                this.DocumentReceivedDate = ecfDocument.DocumentReceivedDate;
                this.DocumentRendition = ecfDocument.DocumentRendition;
                this.DocumentSequenceID = ecfDocument.DocumentSequenceID;
                this.DocumentStatus = ecfDocument.DocumentStatus;
                this.DocumentSubmitter = ecfDocument.DocumentSubmitter;
            }
        }


        public ReviewedDocumentType(TextType documentHashText, IdentificationType documentDocketID, Boolean sealDocumentIndicator)
        {
            this.documentHashText = documentHashText;
            this.documentDocketID = documentDocketID;
            this.sealDocumentIndicator = sealDocumentIndicator;
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 0, ElementName = "DocumentHashText")]
        public TextType DocumentHashText
        {
            get
            {
                return this.documentHashText;
            }
            set
            {
                if ((value == null))
                {
                    throw new System.ArgumentNullException("DocumentHashText");
                }
                if ((this.documentHashText != value))
                {
                    this.documentHashText = value;
                    this.RaisePropertyChanged("DocumentHashText");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 1, ElementName = "DocumentDocketID")]
        public IdentificationType DocumentDocketID
        {
            get
            {
                return this.documentDocketID;
            }
            set
            {
                if ((value == null))
                {
                    throw new System.ArgumentNullException("DocumentDocketID");
                }
                if ((this.documentDocketID != value))
                {
                    this.documentDocketID = value;
                    this.RaisePropertyChanged("DocumentDocketID");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 2, ElementName = "SealDocumentIndicator")]
        public Boolean SealDocumentIndicator
        {
            get
            {
                return this.sealDocumentIndicator;
            }
            set
            {
                if ((value == null))
                {
                    throw new System.ArgumentNullException("SealDocumentIndicator");
                }
                if ((this.sealDocumentIndicator != value))
                {
                    this.sealDocumentIndicator = value;
                    this.RaisePropertyChanged("SealDocumentIndicator");
                }
            }
        }

        [System.Xml.Serialization.XmlIgnore()]
        public System.Boolean IsDocumentAttachedByReference
        {
            get
            {
                return (this.DocumentMetadata != null && this.DocumentMetadata.ParentDocumentReference != null && !string.IsNullOrEmpty(this.DocumentMetadata.ParentDocumentReference.Ref));
            }
        }

        [System.Xml.Serialization.XmlIgnore()]
        public System.String ParentDocumentId
        {
            get
            {
                return ( this.IsDocumentAttachedByReference ? this.DocumentMetadata.ParentDocumentReference.Ref  : string.Empty ) ;
            }
        }

        [System.Xml.Serialization.XmlIgnore()]
        public System.Boolean IsDocumentAccepted
        {
            get
            {
                System.Collections.Generic.List<StatusType> statusList = this.DocumentStatus ;

                string statusText = statusList != null && statusList.Count > 0 ? (NiemStringHelper<TextType>.FirstValue(statusList[0].StatusText)) : string.Empty;
                return (statusText.ToUpper().Equals(PolicyConstants.ACCEPTED_DOCUMENT_STATUS));
            }
        }

        [System.Xml.Serialization.XmlIgnore()]
        public System.Boolean IsDocumentRejected
        {
            get
            {
                System.Collections.Generic.List<StatusType> statusList = this.DocumentStatus;

                string statusText = statusList != null && statusList.Count > 0 ? (NiemStringHelper<TextType>.FirstValue(statusList[0].StatusText)) : string.Empty;
                return (statusText.ToUpper().Equals(PolicyConstants.REJECTED_DOCUMENT_STATUS));
            }
        }

        [System.Xml.Serialization.XmlIgnore()]
        public System.Int32 SequenceNumber
        {
            get
            {
                int sequenceNumber = 0;
                if (this.DocumentSequenceID != null && this.DocumentSequenceID.Count > 0)
                {
                    System.Int32.TryParse(this.DocumentSequenceID[0].ToString(), out sequenceNumber);
                };
                return sequenceNumber;
            }
        }

        
        public void AcceptedDocument()
        {
            this.DocumentStatus = new System.Collections.Generic.List<StatusType> 
            { new StatusType { StatusText = NiemStringHelper<TextType>.ToList(PolicyConstants. ACCEPTED_DOCUMENT_STATUS) } };
        }

        
        public void RejectedDocument(string rejectionReason)
        {
            this.DocumentStatus = new System.Collections.Generic.List<StatusType> { 
                                        new StatusType 
                                        { 
                                           StatusText = NiemStringHelper<TextType>.ToList(PolicyConstants.REJECTED_DOCUMENT_STATUS) , 
                                           StatusDescriptionText = NiemStringHelper<TextType>.ToList(rejectionReason) 
                                        }
                                }   ;
        }

        [System.Xml.Serialization.XmlIgnore()]
        public System.String RejectionReason
        {
            get
            {
                List<StatusType> statusList = this.DocumentStatus ;
                return 
                (
                    statusList != null &&
                    statusList.Count > 0 && 
                    statusList[0].StatusDescriptionText != null ?
                    NiemStringHelper<TextType>.FirstValue(statusList[0].StatusDescriptionText) :
                    string.Empty
                );
            }
        }

    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3053")]
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]

    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:oasis:names:tc:legalxml-courtfiling:schema:xsd:CommonTypes-4.0", TypeName = "QueryMessageType")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "urn:oasis:names:tc:legalxml-courtfiling:schema:xsd:CommonTypes-4.0", IsNullable = true, ElementName = "QueryMessageType")]
    
    public partial class QueryMessageType : ComplexObjectType
    {

        /// <remarks/>
        private IdentificationType sendingMDELocationID;

        /// <remarks/>
        private string sendingMDEProfileCode;

        /// <remarks/>
        private EntityType querySubmitter;

        /// <remarks/>
        private CourtType caseCourt;

        public QueryMessageType()
        {
        }

        public QueryMessageType(IdentificationType sendingMDELocationID, string sendingMDEProfileCode, EntityType querySubmitter, CourtType caseCourt)
        {
            this.sendingMDELocationID = sendingMDELocationID;
            this.sendingMDEProfileCode = sendingMDEProfileCode;
            this.querySubmitter = querySubmitter;
            this.caseCourt = caseCourt;
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 0, ElementName = "SendingMDELocationID")]
        public IdentificationType SendingMDELocationID
        {
            get
            {
                return this.sendingMDELocationID;
            }
            set
            {
                if ((value == null))
                {
                    throw new System.ArgumentNullException("SendingMDELocationID");
                }
                if ((this.sendingMDELocationID != value))
                {
                    this.sendingMDELocationID = value;
                    this.RaisePropertyChanged("SendingMDELocationID");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(DataType = "normalizedString", Order = 1, ElementName = "SendingMDEProfileCode")]
        public string SendingMDEProfileCode
        {
            get
            {
                return this.sendingMDEProfileCode;
            }
            set
            {
                if ((this.sendingMDEProfileCode != value))
                {
                    this.sendingMDEProfileCode = value;
                    this.RaisePropertyChanged("SendingMDEProfileCode");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 2, ElementName = "QuerySubmitter")]
        public EntityType QuerySubmitter
        {
            get
            {
                return this.querySubmitter;
            }
            set
            {
                if ((value == null))
                {
                    throw new System.ArgumentNullException("QuerySubmitter");
                }
                if ((this.querySubmitter != value))
                {
                    this.querySubmitter = value;
                    this.RaisePropertyChanged("QuerySubmitter");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Namespace = "http://niem.gov/niem/domains/jxdm/4.0", IsNullable = true, Order = 3, ElementName = "CaseCourt")]
        public CourtType CaseCourt
        {
            get
            {
                return this.caseCourt;
            }
            set
            {
                if ((this.caseCourt != value))
                {
                    this.caseCourt = value;
                    this.RaisePropertyChanged("CaseCourt");
                }
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3053")]
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]

    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:oasis:names:tc:legalxml-courtfiling:schema:xsd:CommonTypes-4.0", TypeName = "QueryResponseMessageType")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "urn:oasis:names:tc:legalxml-courtfiling:schema:xsd:CommonTypes-4.0", IsNullable = true, ElementName = "QueryResponseMessageType")]
    
    public partial class QueryResponseMessageType : ComplexObjectType
    {

        /// <remarks/>
        private IdentificationType sendingMDELocationID;

        /// <remarks/>
        private string sendingMDEProfileCode;

        /// <remarks/>
        private CourtType caseCourt;

        /// <remarks/>
        private System.Collections.Generic.List<ErrorType> error;

        public QueryResponseMessageType()
        {
        }

        public QueryResponseMessageType(IdentificationType sendingMDELocationID, string sendingMDEProfileCode, CourtType caseCourt, System.Collections.Generic.List<ErrorType> error)
        {
            this.sendingMDELocationID = sendingMDELocationID;
            this.sendingMDEProfileCode = sendingMDEProfileCode;
            this.caseCourt = caseCourt;
            this.error = error;
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 0, ElementName = "SendingMDELocationID")]
        public IdentificationType SendingMDELocationID
        {
            get
            {
                return this.sendingMDELocationID;
            }
            set
            {
                if ((value == null))
                {
                    throw new System.ArgumentNullException("SendingMDELocationID");
                }
                if ((this.sendingMDELocationID != value))
                {
                    this.sendingMDELocationID = value;
                    this.RaisePropertyChanged("SendingMDELocationID");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(DataType = "normalizedString", Order = 1, ElementName = "SendingMDEProfileCode")]
        public string SendingMDEProfileCode
        {
            get
            {
                return this.sendingMDEProfileCode;
            }
            set
            {
                if ((this.sendingMDEProfileCode != value))
                {
                    this.sendingMDEProfileCode = value;
                    this.RaisePropertyChanged("SendingMDEProfileCode");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Namespace = "http://niem.gov/niem/domains/jxdm/4.0", IsNullable = true, Order = 2, ElementName = "CaseCourt")]
        public CourtType CaseCourt
        {
            get
            {
                return this.caseCourt;
            }
            set
            {
                if ((this.caseCourt != value))
                {
                    this.caseCourt = value;
                    this.RaisePropertyChanged("CaseCourt");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("Error", Order = 3)]
        public System.Collections.Generic.List<ErrorType> Error
        {
            get
            {
                return this.error;
            }
            set
            {
                if ((this.error != value))
                {
                    this.error = value;
                    this.RaisePropertyChanged("Error");
                }
            }
        }

        [System.Xml.Serialization.XmlIgnore()]
        public bool IsSuccessfull
        {
            get
            {
                bool isSuccessfull = false;
                if (this.error == null || (this.error != null && this.error.Count == 0))
                {
                    isSuccessfull = true;
                }
                else 
                {
                    ErrorType successFullIndicator = this.error.FirstOrDefault(et => et.ErrorCode != null && et.ErrorCode.Value.Equals(Constants.ECF_SUCCESSFULL_ERROR_CODE));
                    if (successFullIndicator != null) isSuccessfull = true;
                }
                
                return isSuccessfull;
            }
        }

    }


    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3053")]
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:oasis:names:tc:legalxml-courtfiling:schema:xsd:CommonTypes-4.0", IncludeInSchema = true, TypeName = "RoleChoiceType")]
    public enum RoleChoiceType
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("http://niem.gov/niem/niem-core/2.0:RoleOfItemReference")]
        RoleOfItemReference,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("http://niem.gov/niem/niem-core/2.0:RoleOfOrganizationReference")]
        RoleOfOrganizationReference,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("http://niem.gov/niem/niem-core/2.0:RoleOfPersonReference")]
        RoleOfPersonReference,
    }


    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3053")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:oasis:names:tc:legalxml-courtfiling:schema:xsd:CommonTypes-4.0", IncludeInSchema = true, TypeName = "CaseTypeSelectionType")]
    public enum CaseTypeSelectionType
    {

        [System.Xml.Serialization.XmlEnumAttribute(Name = "urn:oasis:names:tc:legalxml-courtfiling:schema:xsd:AppellateCase-4.0:AppellateCase")]
        Appellate,


        [System.Xml.Serialization.XmlEnumAttribute(Name = "urn:oasis:names:tc:legalxml-courtfiling:schema:xsd:CitationCase-4.0:Case")]
        CitationCase,


        [System.Xml.Serialization.XmlEnumAttribute(Name = "urn:oasis:names:tc:legalxml-courtfiling:schema:xsd:CivilCase-4.0:Case")]
        CivilCase,

        [System.Xml.Serialization.XmlEnumAttribute(Name = "urn:oasis:names:tc:legalxml-courtfiling:schema:xsd:CriminalCase-4.0:Case")]
        CriminalCase,

        [System.Xml.Serialization.XmlEnumAttribute(Name = "urn:oasis:names:tc:legalxml-courtfiling:schema:xsd:DomesticCase-4.0:Case")]
        DomesticCase,

        [System.Xml.Serialization.XmlEnumAttribute(Name = "urn:oasis:names:tc:legalxml-courtfiling:schema:xsd:JuvenileCase-4.0:Case")]
        JuvenileCase,


        [System.Xml.Serialization.XmlEnumAttribute(Name = "http://niem.gov/niem/niem-core/2.0:Case")]
        NiemCase,


    }

}

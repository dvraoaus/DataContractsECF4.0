/*
	'=======================================================================
	'   Author(s):      D V Rao
	'   Module/Form:    ECF-4.0-MessageReceiptMessage.cs
	'   Created Date:   
	'   Description:    
	'
	'   Modification History:
	'=======================================================================
	'   Author(s)       Date        Control/Procedure       Change
	'=======================================================================
    '   Rao     06/08/2012       Add Namespaces
	'=======================================================================
	*/

#region WSCF
//------------------------------------------------------------------------------
// <autogenerated code>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated code>
//------------------------------------------------------------------------------
// File time 27-11-08 03:57 PM
//
// This source code was auto-generated by WsContractFirst, Version=0.7.6319.1
#endregion

using Oasis.LegalXml.CourtFiling.v40.Ecf;
using Niem.Domains.Jxdm.v40; 

namespace Oasis.LegalXml.CourtFiling.v40.Message
{
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3053")]
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]

    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:oasis:names:tc:legalxml-courtfiling:schema:xsd:MessageReceiptMessage-4.0", TypeName="MessageReceiptMessageType")]
    [System.Xml.Serialization.XmlRootAttribute("MessageReceiptMessage", Namespace="urn:oasis:names:tc:legalxml-courtfiling:schema:xsd:MessageReceiptMessage-4.0", IsNullable=false, ElementName="MessageReceiptMessageType")]
    
    public partial class MessageReceiptMessageType : CaseFilingType
    {
        
        /// <remarks/>
        private CourtType caseCourt;
        
        /// <remarks/>
        private System.Collections.Generic.List<ErrorType> error;

        [field: System.NonSerialized]
        [System.Xml.Serialization.XmlNamespaceDeclarations]
        public System.Xml.Serialization.XmlSerializerNamespaces namespaces = new System.Xml.Serialization.XmlSerializerNamespaces(); 

        public MessageReceiptMessageType()
        {
            EcfHelper.AddNameSpaces(namespaces);
        }
        
        public MessageReceiptMessageType(CourtType caseCourt, System.Collections.Generic.List<ErrorType> error)
        {
            EcfHelper.AddNameSpaces(namespaces);
            this.caseCourt = caseCourt;
            this.error = error;
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Namespace="http://niem.gov/niem/domains/jxdm/4.0", IsNullable=true, Order=0, ElementName="CaseCourt")]
        public CourtType CaseCourt
        {
            get
            {
                return this.caseCourt;
            }
            set
            {
                if ((this.caseCourt != value))
                {
                    this.caseCourt = value;
                    this.RaisePropertyChanged("CaseCourt");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("Error", Namespace="urn:oasis:names:tc:legalxml-courtfiling:schema:xsd:CommonTypes-4.0", Order=1)]
        public System.Collections.Generic.List<ErrorType> Error
        {
            get
            {
                return this.error;
            }
            set
            {
                if ((this.error != value))
                {
                    this.error = value;
                    this.RaisePropertyChanged("Error");
                }
            }
        }

        [System.Xml.Serialization.XmlIgnore()]
        public bool OperationSuccessfull
        {
            get
            {
                return (  ( this.error == null)                           || 
                          ( this.error != null && this.error.Count == 0 ) || 
                          ( this.error != null && this.error.Count == 1 && this.error[0].ErrorCode.ToString().Equals(Niem.NiemCore.v20.Constants.ECF_SUCCESSFULL_ERROR_CODE))
                       )
                                               ;
            }
        }

        [System.Xml.Serialization.XmlIgnore()]
        public string ErrorText
        {
            get
            {
                System.Text.StringBuilder sb = new System.Text.StringBuilder();
                if (this.error != null && this.error.Count > 0)
                {
                    foreach (var ecfError in this.error)
                    {
                        sb.Append(ecfError.ErrorCode.ToString() + " " + ecfError.ErrorText.ToString() + "\n");
                    }
                }
                return sb.ToString();
                
            }
        }

        [System.Xml.Serialization.XmlIgnore()]
        public string OperationReturnValue
        {
            get
            {
                string operationReturnValue = string.Empty ;
                if (this.OperationSuccessfull && this.DocumentIdentification != null && this.DocumentIdentification.Count > 0)
                {
                    string identificationCategory = string.Empty ;
                    this.DocumentIdentification[0].ToSimpleType(out operationReturnValue, out identificationCategory);
                }
                return operationReturnValue;

            }
        }

    }
    
  
}
